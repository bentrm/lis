# Generated by Django 2.0.2 on 2018-04-24 09:56

import django.contrib.gis.db.models.fields
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import wagtail.core.blocks
import wagtail.core.fields
import wagtail.images.blocks


class Migration(migrations.Migration):

    dependencies = [
        ('cms', '0002_auto_20180419_1208'),
    ]

    operations = [
        migrations.AlterModelOptions(
            name='contacttypepage',
            options={'verbose_name': 'Contact type', 'verbose_name_plural': 'Types of contact'},
        ),
        migrations.AlterModelOptions(
            name='contacttypespage',
            options={'verbose_name': 'Types of contact'},
        ),
        migrations.AlterModelOptions(
            name='level1page',
            options={'verbose_name': 'I. Discovery'},
        ),
        migrations.AlterModelOptions(
            name='level2page',
            options={'verbose_name': 'II. Delving deeper'},
        ),
        migrations.AlterModelOptions(
            name='level3page',
            options={'verbose_name': 'III. Research literature'},
        ),
        migrations.AlterModelOptions(
            name='literarycategoriespage',
            options={'verbose_name': 'Literary genre'},
        ),
        migrations.AlterModelOptions(
            name='literarycategorypage',
            options={'verbose_name': 'Literary genre', 'verbose_name_plural': 'Literary genres'},
        ),
        migrations.AlterModelOptions(
            name='locationtypepage',
            options={'verbose_name': 'Type of location', 'verbose_name_plural': 'Types of locations'},
        ),
        migrations.AlterModelOptions(
            name='locationtypespage',
            options={'verbose_name': 'Types of locations'},
        ),
        migrations.AlterField(
            model_name='authorliterarycategory',
            name='literary_category',
            field=models.ForeignKey(help_text='Literary genre that the author is associated with.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='authors', to='cms.LiteraryCategoryPage', verbose_name='Literary genre'),
        ),
        migrations.AlterField(
            model_name='authorliteraryperiod',
            name='literary_period',
            field=models.ForeignKey(help_text='Literary period that the author is associated with.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='authors', to='cms.LiteraryPeriodPage', verbose_name='Literary period'),
        ),
        migrations.AlterField(
            model_name='authorpage',
            name='date_of_birth_day',
            field=models.PositiveSmallIntegerField(blank=True, help_text='The day that the author is born on.', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(31)], verbose_name='Day of birth'),
        ),
        migrations.AlterField(
            model_name='authorpage',
            name='date_of_death_day',
            field=models.PositiveSmallIntegerField(blank=True, help_text='The day that the author died at.', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(31)], verbose_name='Day of death'),
        ),
        migrations.AlterField(
            model_name='authorpage',
            name='date_of_death_month',
            field=models.PositiveSmallIntegerField(blank=True, choices=[(1, 'January'), (2, 'February'), (3, 'March'), (4, 'April'), (5, 'May'), (6, 'June'), (7, 'July'), (8, 'August'), (9, 'September'), (10, 'October'), (11, 'November'), (12, 'December')], help_text='The month that the author died in.', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(12)], verbose_name='Month of death'),
        ),
        migrations.AlterField(
            model_name='authorpage',
            name='date_of_death_year',
            field=models.PositiveSmallIntegerField(blank=True, help_text='The year that the author died in.', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(9999)], verbose_name='Year of death'),
        ),
        migrations.AlterField(
            model_name='authorpage',
            name='sex',
            field=models.CharField(choices=[('U', 'Unknown'), ('M', 'Male'), ('F', 'Female')], default='U', max_length=1, verbose_name='Sex'),
        ),
        migrations.AlterField(
            model_name='authorpagename',
            name='first_name_cs',
            field=models.CharField(blank=True, help_text='The first name in Czech if different from international spelling.', max_length=255, verbose_name='First name'),
        ),
        migrations.AlterField(
            model_name='authorpagename',
            name='first_name_de',
            field=models.CharField(blank=True, help_text='The first name in German if different from international spelling.', max_length=255, verbose_name='First name'),
        ),
        migrations.AlterField(
            model_name='authorpagename',
            name='is_pseudonym',
            field=models.BooleanField(default=False, help_text='This name has been used as a pseudonym by the author.', verbose_name='Is pseudonym'),
        ),
        migrations.AlterField(
            model_name='authorpagename',
            name='last_name_cs',
            field=models.CharField(blank=True, help_text='The first name in Czech if different from international spelling.', max_length=255, verbose_name='Last name'),
        ),
        migrations.AlterField(
            model_name='authorpagename',
            name='last_name_de',
            field=models.CharField(blank=True, help_text='The last name in German if different from international spelling.', max_length=255, verbose_name='Last name'),
        ),
        migrations.AlterField(
            model_name='authorpagename',
            name='title',
            field=models.CharField(blank=True, help_text='Academic title of the author if any.', max_length=255, verbose_name='Title'),
        ),
        migrations.AlterField(
            model_name='authorpagename',
            name='title_cs',
            field=models.CharField(blank=True, help_text='Academic title of the author in Czech.', max_length=255, verbose_name='Title'),
        ),
        migrations.AlterField(
            model_name='authorpagename',
            name='title_de',
            field=models.CharField(blank=True, help_text='Academic title of the author in German.', max_length=255, verbose_name='Title'),
        ),
        migrations.AlterField(
            model_name='documentmedia',
            name='alt_title',
            field=models.CharField(blank=True, help_text='Title that may be shown in tooltips and is used by screen readers.', max_length=1024, null=True, verbose_name='Alternative title'),
        ),
        migrations.AlterField(
            model_name='documentmedia',
            name='alt_title_cs',
            field=models.CharField(blank=True, max_length=1024, null=True, verbose_name='Czech alternative title'),
        ),
        migrations.AlterField(
            model_name='documentmedia',
            name='alt_title_de',
            field=models.CharField(blank=True, max_length=1024, null=True, verbose_name='German alternative title'),
        ),
        migrations.AlterField(
            model_name='documentmedia',
            name='caption',
            field=models.CharField(blank=True, help_text='A caption that may be presented with the file.', max_length=1024, null=True, verbose_name='Caption'),
        ),
        migrations.AlterField(
            model_name='documentmedia',
            name='caption_cs',
            field=models.CharField(blank=True, help_text='Caption in Czech translations.', max_length=1024, null=True, verbose_name='Czech caption'),
        ),
        migrations.AlterField(
            model_name='documentmedia',
            name='caption_de',
            field=models.CharField(blank=True, help_text='Caption in German translations.', max_length=1024, null=True, verbose_name='German caption'),
        ),
        migrations.AlterField(
            model_name='documentmedia',
            name='title_cs',
            field=models.CharField(blank=True, max_length=255, null=True, verbose_name='Czech title'),
        ),
        migrations.AlterField(
            model_name='documentmedia',
            name='title_de',
            field=models.CharField(blank=True, max_length=255, null=True, verbose_name='German title'),
        ),
        migrations.AlterField(
            model_name='i18npage',
            name='draft_title_cs',
            field=models.CharField(blank=True, editable=False, help_text='Czech page title as given in the latest draft.', max_length=255, verbose_name='Draft title'),
        ),
        migrations.AlterField(
            model_name='i18npage',
            name='draft_title_de',
            field=models.CharField(blank=True, editable=False, help_text='German title of the page as given in the latest draft.', max_length=255, verbose_name='Draft title'),
        ),
        migrations.AlterField(
            model_name='i18npage',
            name='title_cs',
            field=models.CharField(blank=True, help_text='Czech title of the page.', max_length=255, verbose_name='Czech title'),
        ),
        migrations.AlterField(
            model_name='i18npage',
            name='title_de',
            field=models.CharField(blank=True, help_text='German title of the page.', max_length=255, verbose_name='German title'),
        ),
        migrations.AlterField(
            model_name='imagemedia',
            name='alt_title',
            field=models.CharField(blank=True, help_text='Title that may be shown in tooltips and is used by screen readers.', max_length=1024, null=True, verbose_name='Alternative title'),
        ),
        migrations.AlterField(
            model_name='imagemedia',
            name='alt_title_cs',
            field=models.CharField(blank=True, max_length=1024, null=True, verbose_name='Czech alternative title'),
        ),
        migrations.AlterField(
            model_name='imagemedia',
            name='alt_title_de',
            field=models.CharField(blank=True, max_length=1024, null=True, verbose_name='German alternative title'),
        ),
        migrations.AlterField(
            model_name='imagemedia',
            name='caption',
            field=models.CharField(blank=True, help_text='A caption that may be presented with the file.', max_length=1024, null=True, verbose_name='Caption'),
        ),
        migrations.AlterField(
            model_name='imagemedia',
            name='caption_cs',
            field=models.CharField(blank=True, help_text='Caption in Czech translations.', max_length=1024, null=True, verbose_name='Czech caption'),
        ),
        migrations.AlterField(
            model_name='imagemedia',
            name='caption_de',
            field=models.CharField(blank=True, help_text='Caption in German translations.', max_length=1024, null=True, verbose_name='German caption'),
        ),
        migrations.AlterField(
            model_name='imagemedia',
            name='title_cs',
            field=models.CharField(blank=True, max_length=255, null=True, verbose_name='Czech title'),
        ),
        migrations.AlterField(
            model_name='imagemedia',
            name='title_de',
            field=models.CharField(blank=True, max_length=255, null=True, verbose_name='German title'),
        ),
        migrations.AlterField(
            model_name='level1page',
            name='biography',
            field=wagtail.core.fields.StreamField((('paragraph', wagtail.core.blocks.StructBlock((('heading', wagtail.core.blocks.CharBlock(help_text='An optional heading to structure comprehensive text content.', label='Optional heading', requrired=False)), ('images', wagtail.core.blocks.ListBlock(wagtail.images.blocks.ImageChooserBlock(), help_text='Bilder die nahe des eigentlichen Textinhalts des Abschnitts platziert werden sollen.', label='Bilder')), ('content', wagtail.core.blocks.RichTextBlock(features=['bold', 'italic', 'strikethrough', 'sup', 'ol', 'ul', 'hr', 'link', 'blockquote'], help_text='Der eigentliche Textinhalt des Abschnitts.', label='Inhalt', required=True)), ('footnotes', wagtail.core.blocks.ListBlock(wagtail.core.blocks.StructBlock((('tag', wagtail.core.blocks.CharBlock(help_text="A tag that allows to link the footnote with the paragraphs text content in the form '[tag]'.", label='Linkable tag', required=True)), ('footnote', wagtail.core.blocks.RichTextBlock(features=['bold', 'italic', 'strikethrough', 'link'], help_text='Citations, comments and references.', label='Footnote')))), help_text='Optional footnotes to the text content.', label='Fußnoten')), ('editor', wagtail.core.blocks.CharBlock(help_text='Der Autor oder Übersetzer, die Autorin oder Übersetzerin des Textinhalts.', label='Editor', required=True))))),), blank=True, help_text='An introductory biography of the author aimed at laymen.', verbose_name='Biography'),
        ),
        migrations.AlterField(
            model_name='level1page',
            name='biography_cs',
            field=wagtail.core.fields.StreamField((('paragraph', wagtail.core.blocks.StructBlock((('heading', wagtail.core.blocks.CharBlock(help_text='An optional heading to structure comprehensive text content.', label='Optional heading', requrired=False)), ('images', wagtail.core.blocks.ListBlock(wagtail.images.blocks.ImageChooserBlock(), help_text='Bilder die nahe des eigentlichen Textinhalts des Abschnitts platziert werden sollen.', label='Bilder')), ('content', wagtail.core.blocks.RichTextBlock(features=['bold', 'italic', 'strikethrough', 'sup', 'ol', 'ul', 'hr', 'link', 'blockquote'], help_text='Der eigentliche Textinhalt des Abschnitts.', label='Inhalt', required=True)), ('footnotes', wagtail.core.blocks.ListBlock(wagtail.core.blocks.StructBlock((('tag', wagtail.core.blocks.CharBlock(help_text="A tag that allows to link the footnote with the paragraphs text content in the form '[tag]'.", label='Linkable tag', required=True)), ('footnote', wagtail.core.blocks.RichTextBlock(features=['bold', 'italic', 'strikethrough', 'link'], help_text='Citations, comments and references.', label='Footnote')))), help_text='Optional footnotes to the text content.', label='Fußnoten')), ('editor', wagtail.core.blocks.CharBlock(help_text='Der Autor oder Übersetzer, die Autorin oder Übersetzerin des Textinhalts.', label='Editor', required=True))))),), blank=True, help_text='An introductory biography of the author aimed at laymen.', verbose_name='Biography'),
        ),
        migrations.AlterField(
            model_name='level1page',
            name='biography_de',
            field=wagtail.core.fields.StreamField((('paragraph', wagtail.core.blocks.StructBlock((('heading', wagtail.core.blocks.CharBlock(help_text='An optional heading to structure comprehensive text content.', label='Optional heading', requrired=False)), ('images', wagtail.core.blocks.ListBlock(wagtail.images.blocks.ImageChooserBlock(), help_text='Bilder die nahe des eigentlichen Textinhalts des Abschnitts platziert werden sollen.', label='Bilder')), ('content', wagtail.core.blocks.RichTextBlock(features=['bold', 'italic', 'strikethrough', 'sup', 'ol', 'ul', 'hr', 'link', 'blockquote'], help_text='Der eigentliche Textinhalt des Abschnitts.', label='Inhalt', required=True)), ('footnotes', wagtail.core.blocks.ListBlock(wagtail.core.blocks.StructBlock((('tag', wagtail.core.blocks.CharBlock(help_text="A tag that allows to link the footnote with the paragraphs text content in the form '[tag]'.", label='Linkable tag', required=True)), ('footnote', wagtail.core.blocks.RichTextBlock(features=['bold', 'italic', 'strikethrough', 'link'], help_text='Citations, comments and references.', label='Footnote')))), help_text='Optional footnotes to the text content.', label='Fußnoten')), ('editor', wagtail.core.blocks.CharBlock(help_text='Der Autor oder Übersetzer, die Autorin oder Übersetzerin des Textinhalts.', label='Editor', required=True))))),), blank=True, help_text='An introductory biography of the author aimed at laymen.', verbose_name='Biography'),
        ),
        migrations.AlterField(
            model_name='level1page',
            name='works',
            field=wagtail.core.fields.StreamField((('paragraph', wagtail.core.blocks.StructBlock((('heading', wagtail.core.blocks.CharBlock(help_text='An optional heading to structure comprehensive text content.', label='Optional heading', requrired=False)), ('images', wagtail.core.blocks.ListBlock(wagtail.images.blocks.ImageChooserBlock(), help_text='Bilder die nahe des eigentlichen Textinhalts des Abschnitts platziert werden sollen.', label='Bilder')), ('content', wagtail.core.blocks.RichTextBlock(features=['bold', 'italic', 'strikethrough', 'sup', 'ol', 'ul', 'hr', 'link', 'blockquote'], help_text='Der eigentliche Textinhalt des Abschnitts.', label='Inhalt', required=True)), ('footnotes', wagtail.core.blocks.ListBlock(wagtail.core.blocks.StructBlock((('tag', wagtail.core.blocks.CharBlock(help_text="A tag that allows to link the footnote with the paragraphs text content in the form '[tag]'.", label='Linkable tag', required=True)), ('footnote', wagtail.core.blocks.RichTextBlock(features=['bold', 'italic', 'strikethrough', 'link'], help_text='Citations, comments and references.', label='Footnote')))), help_text='Optional footnotes to the text content.', label='Fußnoten')), ('editor', wagtail.core.blocks.CharBlock(help_text='Der Autor oder Übersetzer, die Autorin oder Übersetzerin des Textinhalts.', label='Editor', required=True))))),), blank=True, help_text='An introduction to the works of the author aimed at laymen.', verbose_name='Literary works'),
        ),
        migrations.AlterField(
            model_name='level1page',
            name='works_cs',
            field=wagtail.core.fields.StreamField((('paragraph', wagtail.core.blocks.StructBlock((('heading', wagtail.core.blocks.CharBlock(help_text='An optional heading to structure comprehensive text content.', label='Optional heading', requrired=False)), ('images', wagtail.core.blocks.ListBlock(wagtail.images.blocks.ImageChooserBlock(), help_text='Bilder die nahe des eigentlichen Textinhalts des Abschnitts platziert werden sollen.', label='Bilder')), ('content', wagtail.core.blocks.RichTextBlock(features=['bold', 'italic', 'strikethrough', 'sup', 'ol', 'ul', 'hr', 'link', 'blockquote'], help_text='Der eigentliche Textinhalt des Abschnitts.', label='Inhalt', required=True)), ('footnotes', wagtail.core.blocks.ListBlock(wagtail.core.blocks.StructBlock((('tag', wagtail.core.blocks.CharBlock(help_text="A tag that allows to link the footnote with the paragraphs text content in the form '[tag]'.", label='Linkable tag', required=True)), ('footnote', wagtail.core.blocks.RichTextBlock(features=['bold', 'italic', 'strikethrough', 'link'], help_text='Citations, comments and references.', label='Footnote')))), help_text='Optional footnotes to the text content.', label='Fußnoten')), ('editor', wagtail.core.blocks.CharBlock(help_text='Der Autor oder Übersetzer, die Autorin oder Übersetzerin des Textinhalts.', label='Editor', required=True))))),), blank=True, help_text='An introduction to the works of the author aimed at laymen.', verbose_name='Literary works'),
        ),
        migrations.AlterField(
            model_name='level1page',
            name='works_de',
            field=wagtail.core.fields.StreamField((('paragraph', wagtail.core.blocks.StructBlock((('heading', wagtail.core.blocks.CharBlock(help_text='An optional heading to structure comprehensive text content.', label='Optional heading', requrired=False)), ('images', wagtail.core.blocks.ListBlock(wagtail.images.blocks.ImageChooserBlock(), help_text='Bilder die nahe des eigentlichen Textinhalts des Abschnitts platziert werden sollen.', label='Bilder')), ('content', wagtail.core.blocks.RichTextBlock(features=['bold', 'italic', 'strikethrough', 'sup', 'ol', 'ul', 'hr', 'link', 'blockquote'], help_text='Der eigentliche Textinhalt des Abschnitts.', label='Inhalt', required=True)), ('footnotes', wagtail.core.blocks.ListBlock(wagtail.core.blocks.StructBlock((('tag', wagtail.core.blocks.CharBlock(help_text="A tag that allows to link the footnote with the paragraphs text content in the form '[tag]'.", label='Linkable tag', required=True)), ('footnote', wagtail.core.blocks.RichTextBlock(features=['bold', 'italic', 'strikethrough', 'link'], help_text='Citations, comments and references.', label='Footnote')))), help_text='Optional footnotes to the text content.', label='Fußnoten')), ('editor', wagtail.core.blocks.CharBlock(help_text='Der Autor oder Übersetzer, die Autorin oder Übersetzerin des Textinhalts.', label='Editor', required=True))))),), blank=True, help_text='An introduction to the works of the author aimed at laymen.', verbose_name='Literary works'),
        ),
        migrations.AlterField(
            model_name='level2page',
            name='biography',
            field=wagtail.core.fields.StreamField((('paragraph', wagtail.core.blocks.StructBlock((('heading', wagtail.core.blocks.CharBlock(help_text='An optional heading to structure comprehensive text content.', label='Optional heading', requrired=False)), ('images', wagtail.core.blocks.ListBlock(wagtail.images.blocks.ImageChooserBlock(), help_text='Bilder die nahe des eigentlichen Textinhalts des Abschnitts platziert werden sollen.', label='Bilder')), ('content', wagtail.core.blocks.RichTextBlock(features=['bold', 'italic', 'strikethrough', 'sup', 'ol', 'ul', 'hr', 'link', 'blockquote'], help_text='Der eigentliche Textinhalt des Abschnitts.', label='Inhalt', required=True)), ('footnotes', wagtail.core.blocks.ListBlock(wagtail.core.blocks.StructBlock((('tag', wagtail.core.blocks.CharBlock(help_text="A tag that allows to link the footnote with the paragraphs text content in the form '[tag]'.", label='Linkable tag', required=True)), ('footnote', wagtail.core.blocks.RichTextBlock(features=['bold', 'italic', 'strikethrough', 'link'], help_text='Citations, comments and references.', label='Footnote')))), help_text='Optional footnotes to the text content.', label='Fußnoten')), ('editor', wagtail.core.blocks.CharBlock(help_text='Der Autor oder Übersetzer, die Autorin oder Übersetzerin des Textinhalts.', label='Editor', required=True))))),), blank=True, help_text='An introductory biography of the author aimed at laymen.', verbose_name='Biography'),
        ),
        migrations.AlterField(
            model_name='level2page',
            name='biography_cs',
            field=wagtail.core.fields.StreamField((('paragraph', wagtail.core.blocks.StructBlock((('heading', wagtail.core.blocks.CharBlock(help_text='An optional heading to structure comprehensive text content.', label='Optional heading', requrired=False)), ('images', wagtail.core.blocks.ListBlock(wagtail.images.blocks.ImageChooserBlock(), help_text='Bilder die nahe des eigentlichen Textinhalts des Abschnitts platziert werden sollen.', label='Bilder')), ('content', wagtail.core.blocks.RichTextBlock(features=['bold', 'italic', 'strikethrough', 'sup', 'ol', 'ul', 'hr', 'link', 'blockquote'], help_text='Der eigentliche Textinhalt des Abschnitts.', label='Inhalt', required=True)), ('footnotes', wagtail.core.blocks.ListBlock(wagtail.core.blocks.StructBlock((('tag', wagtail.core.blocks.CharBlock(help_text="A tag that allows to link the footnote with the paragraphs text content in the form '[tag]'.", label='Linkable tag', required=True)), ('footnote', wagtail.core.blocks.RichTextBlock(features=['bold', 'italic', 'strikethrough', 'link'], help_text='Citations, comments and references.', label='Footnote')))), help_text='Optional footnotes to the text content.', label='Fußnoten')), ('editor', wagtail.core.blocks.CharBlock(help_text='Der Autor oder Übersetzer, die Autorin oder Übersetzerin des Textinhalts.', label='Editor', required=True))))),), blank=True, help_text='An introductory biography of the author aimed at laymen.', verbose_name='Biography'),
        ),
        migrations.AlterField(
            model_name='level2page',
            name='biography_de',
            field=wagtail.core.fields.StreamField((('paragraph', wagtail.core.blocks.StructBlock((('heading', wagtail.core.blocks.CharBlock(help_text='An optional heading to structure comprehensive text content.', label='Optional heading', requrired=False)), ('images', wagtail.core.blocks.ListBlock(wagtail.images.blocks.ImageChooserBlock(), help_text='Bilder die nahe des eigentlichen Textinhalts des Abschnitts platziert werden sollen.', label='Bilder')), ('content', wagtail.core.blocks.RichTextBlock(features=['bold', 'italic', 'strikethrough', 'sup', 'ol', 'ul', 'hr', 'link', 'blockquote'], help_text='Der eigentliche Textinhalt des Abschnitts.', label='Inhalt', required=True)), ('footnotes', wagtail.core.blocks.ListBlock(wagtail.core.blocks.StructBlock((('tag', wagtail.core.blocks.CharBlock(help_text="A tag that allows to link the footnote with the paragraphs text content in the form '[tag]'.", label='Linkable tag', required=True)), ('footnote', wagtail.core.blocks.RichTextBlock(features=['bold', 'italic', 'strikethrough', 'link'], help_text='Citations, comments and references.', label='Footnote')))), help_text='Optional footnotes to the text content.', label='Fußnoten')), ('editor', wagtail.core.blocks.CharBlock(help_text='Der Autor oder Übersetzer, die Autorin oder Übersetzerin des Textinhalts.', label='Editor', required=True))))),), blank=True, help_text='An introductory biography of the author aimed at laymen.', verbose_name='Biography'),
        ),
        migrations.AlterField(
            model_name='level2page',
            name='perception',
            field=wagtail.core.fields.StreamField((('paragraph', wagtail.core.blocks.StructBlock((('heading', wagtail.core.blocks.CharBlock(help_text='An optional heading to structure comprehensive text content.', label='Optional heading', requrired=False)), ('images', wagtail.core.blocks.ListBlock(wagtail.images.blocks.ImageChooserBlock(), help_text='Bilder die nahe des eigentlichen Textinhalts des Abschnitts platziert werden sollen.', label='Bilder')), ('content', wagtail.core.blocks.RichTextBlock(features=['bold', 'italic', 'strikethrough', 'sup', 'ol', 'ul', 'hr', 'link', 'blockquote'], help_text='Der eigentliche Textinhalt des Abschnitts.', label='Inhalt', required=True)), ('footnotes', wagtail.core.blocks.ListBlock(wagtail.core.blocks.StructBlock((('tag', wagtail.core.blocks.CharBlock(help_text="A tag that allows to link the footnote with the paragraphs text content in the form '[tag]'.", label='Linkable tag', required=True)), ('footnote', wagtail.core.blocks.RichTextBlock(features=['bold', 'italic', 'strikethrough', 'link'], help_text='Citations, comments and references.', label='Footnote')))), help_text='Optional footnotes to the text content.', label='Fußnoten')), ('editor', wagtail.core.blocks.CharBlock(help_text='Der Autor oder Übersetzer, die Autorin oder Übersetzerin des Textinhalts.', label='Editor', required=True))))),), blank=True, help_text='A more in-depth description for interested users on how the author has been received.', verbose_name='Reception'),
        ),
        migrations.AlterField(
            model_name='level2page',
            name='perception_cs',
            field=wagtail.core.fields.StreamField((('paragraph', wagtail.core.blocks.StructBlock((('heading', wagtail.core.blocks.CharBlock(help_text='An optional heading to structure comprehensive text content.', label='Optional heading', requrired=False)), ('images', wagtail.core.blocks.ListBlock(wagtail.images.blocks.ImageChooserBlock(), help_text='Bilder die nahe des eigentlichen Textinhalts des Abschnitts platziert werden sollen.', label='Bilder')), ('content', wagtail.core.blocks.RichTextBlock(features=['bold', 'italic', 'strikethrough', 'sup', 'ol', 'ul', 'hr', 'link', 'blockquote'], help_text='Der eigentliche Textinhalt des Abschnitts.', label='Inhalt', required=True)), ('footnotes', wagtail.core.blocks.ListBlock(wagtail.core.blocks.StructBlock((('tag', wagtail.core.blocks.CharBlock(help_text="A tag that allows to link the footnote with the paragraphs text content in the form '[tag]'.", label='Linkable tag', required=True)), ('footnote', wagtail.core.blocks.RichTextBlock(features=['bold', 'italic', 'strikethrough', 'link'], help_text='Citations, comments and references.', label='Footnote')))), help_text='Optional footnotes to the text content.', label='Fußnoten')), ('editor', wagtail.core.blocks.CharBlock(help_text='Der Autor oder Übersetzer, die Autorin oder Übersetzerin des Textinhalts.', label='Editor', required=True))))),), blank=True, help_text='A more in-depth description for interested users on how the author has been received.', verbose_name='Reception'),
        ),
        migrations.AlterField(
            model_name='level2page',
            name='perception_de',
            field=wagtail.core.fields.StreamField((('paragraph', wagtail.core.blocks.StructBlock((('heading', wagtail.core.blocks.CharBlock(help_text='An optional heading to structure comprehensive text content.', label='Optional heading', requrired=False)), ('images', wagtail.core.blocks.ListBlock(wagtail.images.blocks.ImageChooserBlock(), help_text='Bilder die nahe des eigentlichen Textinhalts des Abschnitts platziert werden sollen.', label='Bilder')), ('content', wagtail.core.blocks.RichTextBlock(features=['bold', 'italic', 'strikethrough', 'sup', 'ol', 'ul', 'hr', 'link', 'blockquote'], help_text='Der eigentliche Textinhalt des Abschnitts.', label='Inhalt', required=True)), ('footnotes', wagtail.core.blocks.ListBlock(wagtail.core.blocks.StructBlock((('tag', wagtail.core.blocks.CharBlock(help_text="A tag that allows to link the footnote with the paragraphs text content in the form '[tag]'.", label='Linkable tag', required=True)), ('footnote', wagtail.core.blocks.RichTextBlock(features=['bold', 'italic', 'strikethrough', 'link'], help_text='Citations, comments and references.', label='Footnote')))), help_text='Optional footnotes to the text content.', label='Fußnoten')), ('editor', wagtail.core.blocks.CharBlock(help_text='Der Autor oder Übersetzer, die Autorin oder Übersetzerin des Textinhalts.', label='Editor', required=True))))),), blank=True, help_text='A more in-depth description for interested users on how the author has been received.', verbose_name='Reception'),
        ),
        migrations.AlterField(
            model_name='level2page',
            name='works',
            field=wagtail.core.fields.StreamField((('paragraph', wagtail.core.blocks.StructBlock((('heading', wagtail.core.blocks.CharBlock(help_text='An optional heading to structure comprehensive text content.', label='Optional heading', requrired=False)), ('images', wagtail.core.blocks.ListBlock(wagtail.images.blocks.ImageChooserBlock(), help_text='Bilder die nahe des eigentlichen Textinhalts des Abschnitts platziert werden sollen.', label='Bilder')), ('content', wagtail.core.blocks.RichTextBlock(features=['bold', 'italic', 'strikethrough', 'sup', 'ol', 'ul', 'hr', 'link', 'blockquote'], help_text='Der eigentliche Textinhalt des Abschnitts.', label='Inhalt', required=True)), ('footnotes', wagtail.core.blocks.ListBlock(wagtail.core.blocks.StructBlock((('tag', wagtail.core.blocks.CharBlock(help_text="A tag that allows to link the footnote with the paragraphs text content in the form '[tag]'.", label='Linkable tag', required=True)), ('footnote', wagtail.core.blocks.RichTextBlock(features=['bold', 'italic', 'strikethrough', 'link'], help_text='Citations, comments and references.', label='Footnote')))), help_text='Optional footnotes to the text content.', label='Fußnoten')), ('editor', wagtail.core.blocks.CharBlock(help_text='Der Autor oder Übersetzer, die Autorin oder Übersetzerin des Textinhalts.', label='Editor', required=True))))),), blank=True, help_text='An introduction to the works of the author aimed at laymen.', verbose_name='Literary works'),
        ),
        migrations.AlterField(
            model_name='level2page',
            name='works_cs',
            field=wagtail.core.fields.StreamField((('paragraph', wagtail.core.blocks.StructBlock((('heading', wagtail.core.blocks.CharBlock(help_text='An optional heading to structure comprehensive text content.', label='Optional heading', requrired=False)), ('images', wagtail.core.blocks.ListBlock(wagtail.images.blocks.ImageChooserBlock(), help_text='Bilder die nahe des eigentlichen Textinhalts des Abschnitts platziert werden sollen.', label='Bilder')), ('content', wagtail.core.blocks.RichTextBlock(features=['bold', 'italic', 'strikethrough', 'sup', 'ol', 'ul', 'hr', 'link', 'blockquote'], help_text='Der eigentliche Textinhalt des Abschnitts.', label='Inhalt', required=True)), ('footnotes', wagtail.core.blocks.ListBlock(wagtail.core.blocks.StructBlock((('tag', wagtail.core.blocks.CharBlock(help_text="A tag that allows to link the footnote with the paragraphs text content in the form '[tag]'.", label='Linkable tag', required=True)), ('footnote', wagtail.core.blocks.RichTextBlock(features=['bold', 'italic', 'strikethrough', 'link'], help_text='Citations, comments and references.', label='Footnote')))), help_text='Optional footnotes to the text content.', label='Fußnoten')), ('editor', wagtail.core.blocks.CharBlock(help_text='Der Autor oder Übersetzer, die Autorin oder Übersetzerin des Textinhalts.', label='Editor', required=True))))),), blank=True, help_text='An introduction to the works of the author aimed at laymen.', verbose_name='Literary works'),
        ),
        migrations.AlterField(
            model_name='level2page',
            name='works_de',
            field=wagtail.core.fields.StreamField((('paragraph', wagtail.core.blocks.StructBlock((('heading', wagtail.core.blocks.CharBlock(help_text='An optional heading to structure comprehensive text content.', label='Optional heading', requrired=False)), ('images', wagtail.core.blocks.ListBlock(wagtail.images.blocks.ImageChooserBlock(), help_text='Bilder die nahe des eigentlichen Textinhalts des Abschnitts platziert werden sollen.', label='Bilder')), ('content', wagtail.core.blocks.RichTextBlock(features=['bold', 'italic', 'strikethrough', 'sup', 'ol', 'ul', 'hr', 'link', 'blockquote'], help_text='Der eigentliche Textinhalt des Abschnitts.', label='Inhalt', required=True)), ('footnotes', wagtail.core.blocks.ListBlock(wagtail.core.blocks.StructBlock((('tag', wagtail.core.blocks.CharBlock(help_text="A tag that allows to link the footnote with the paragraphs text content in the form '[tag]'.", label='Linkable tag', required=True)), ('footnote', wagtail.core.blocks.RichTextBlock(features=['bold', 'italic', 'strikethrough', 'link'], help_text='Citations, comments and references.', label='Footnote')))), help_text='Optional footnotes to the text content.', label='Fußnoten')), ('editor', wagtail.core.blocks.CharBlock(help_text='Der Autor oder Übersetzer, die Autorin oder Übersetzerin des Textinhalts.', label='Editor', required=True))))),), blank=True, help_text='An introduction to the works of the author aimed at laymen.', verbose_name='Literary works'),
        ),
        migrations.AlterField(
            model_name='level3page',
            name='primary_literature',
            field=wagtail.core.fields.StreamField((('paragraph', wagtail.core.blocks.StructBlock((('heading', wagtail.core.blocks.CharBlock(help_text='An optional heading to structure comprehensive text content.', label='Optional heading', requrired=False)), ('images', wagtail.core.blocks.ListBlock(wagtail.images.blocks.ImageChooserBlock(), help_text='Bilder die nahe des eigentlichen Textinhalts des Abschnitts platziert werden sollen.', label='Bilder')), ('content', wagtail.core.blocks.RichTextBlock(features=['bold', 'italic', 'strikethrough', 'sup', 'ol', 'ul', 'hr', 'link', 'blockquote'], help_text='Der eigentliche Textinhalt des Abschnitts.', label='Inhalt', required=True)), ('footnotes', wagtail.core.blocks.ListBlock(wagtail.core.blocks.StructBlock((('tag', wagtail.core.blocks.CharBlock(help_text="A tag that allows to link the footnote with the paragraphs text content in the form '[tag]'.", label='Linkable tag', required=True)), ('footnote', wagtail.core.blocks.RichTextBlock(features=['bold', 'italic', 'strikethrough', 'link'], help_text='Citations, comments and references.', label='Footnote')))), help_text='Optional footnotes to the text content.', label='Fußnoten')), ('editor', wagtail.core.blocks.CharBlock(help_text='Der Autor oder Übersetzer, die Autorin oder Übersetzerin des Textinhalts.', label='Editor', required=True))))),), blank=True, help_text='A more in-depth presentation of primary literature of the author for an academic user.', verbose_name='Primary literature'),
        ),
        migrations.AlterField(
            model_name='level3page',
            name='primary_literature_cs',
            field=wagtail.core.fields.StreamField((('paragraph', wagtail.core.blocks.StructBlock((('heading', wagtail.core.blocks.CharBlock(help_text='An optional heading to structure comprehensive text content.', label='Optional heading', requrired=False)), ('images', wagtail.core.blocks.ListBlock(wagtail.images.blocks.ImageChooserBlock(), help_text='Bilder die nahe des eigentlichen Textinhalts des Abschnitts platziert werden sollen.', label='Bilder')), ('content', wagtail.core.blocks.RichTextBlock(features=['bold', 'italic', 'strikethrough', 'sup', 'ol', 'ul', 'hr', 'link', 'blockquote'], help_text='Der eigentliche Textinhalt des Abschnitts.', label='Inhalt', required=True)), ('footnotes', wagtail.core.blocks.ListBlock(wagtail.core.blocks.StructBlock((('tag', wagtail.core.blocks.CharBlock(help_text="A tag that allows to link the footnote with the paragraphs text content in the form '[tag]'.", label='Linkable tag', required=True)), ('footnote', wagtail.core.blocks.RichTextBlock(features=['bold', 'italic', 'strikethrough', 'link'], help_text='Citations, comments and references.', label='Footnote')))), help_text='Optional footnotes to the text content.', label='Fußnoten')), ('editor', wagtail.core.blocks.CharBlock(help_text='Der Autor oder Übersetzer, die Autorin oder Übersetzerin des Textinhalts.', label='Editor', required=True))))),), blank=True, help_text='A more in-depth presentation of primary literature of the author for an academic user.', verbose_name='Primary literature'),
        ),
        migrations.AlterField(
            model_name='level3page',
            name='primary_literature_de',
            field=wagtail.core.fields.StreamField((('paragraph', wagtail.core.blocks.StructBlock((('heading', wagtail.core.blocks.CharBlock(help_text='An optional heading to structure comprehensive text content.', label='Optional heading', requrired=False)), ('images', wagtail.core.blocks.ListBlock(wagtail.images.blocks.ImageChooserBlock(), help_text='Bilder die nahe des eigentlichen Textinhalts des Abschnitts platziert werden sollen.', label='Bilder')), ('content', wagtail.core.blocks.RichTextBlock(features=['bold', 'italic', 'strikethrough', 'sup', 'ol', 'ul', 'hr', 'link', 'blockquote'], help_text='Der eigentliche Textinhalt des Abschnitts.', label='Inhalt', required=True)), ('footnotes', wagtail.core.blocks.ListBlock(wagtail.core.blocks.StructBlock((('tag', wagtail.core.blocks.CharBlock(help_text="A tag that allows to link the footnote with the paragraphs text content in the form '[tag]'.", label='Linkable tag', required=True)), ('footnote', wagtail.core.blocks.RichTextBlock(features=['bold', 'italic', 'strikethrough', 'link'], help_text='Citations, comments and references.', label='Footnote')))), help_text='Optional footnotes to the text content.', label='Fußnoten')), ('editor', wagtail.core.blocks.CharBlock(help_text='Der Autor oder Übersetzer, die Autorin oder Übersetzerin des Textinhalts.', label='Editor', required=True))))),), blank=True, help_text='A more in-depth presentation of primary literature of the author for an academic user.', verbose_name='Primary literature'),
        ),
        migrations.AlterField(
            model_name='level3page',
            name='secondary_literature',
            field=wagtail.core.fields.StreamField((('paragraph', wagtail.core.blocks.StructBlock((('heading', wagtail.core.blocks.CharBlock(help_text='An optional heading to structure comprehensive text content.', label='Optional heading', requrired=False)), ('images', wagtail.core.blocks.ListBlock(wagtail.images.blocks.ImageChooserBlock(), help_text='Bilder die nahe des eigentlichen Textinhalts des Abschnitts platziert werden sollen.', label='Bilder')), ('content', wagtail.core.blocks.RichTextBlock(features=['bold', 'italic', 'strikethrough', 'sup', 'ol', 'ul', 'hr', 'link', 'blockquote'], help_text='Der eigentliche Textinhalt des Abschnitts.', label='Inhalt', required=True)), ('footnotes', wagtail.core.blocks.ListBlock(wagtail.core.blocks.StructBlock((('tag', wagtail.core.blocks.CharBlock(help_text="A tag that allows to link the footnote with the paragraphs text content in the form '[tag]'.", label='Linkable tag', required=True)), ('footnote', wagtail.core.blocks.RichTextBlock(features=['bold', 'italic', 'strikethrough', 'link'], help_text='Citations, comments and references.', label='Footnote')))), help_text='Optional footnotes to the text content.', label='Fußnoten')), ('editor', wagtail.core.blocks.CharBlock(help_text='Der Autor oder Übersetzer, die Autorin oder Übersetzerin des Textinhalts.', label='Editor', required=True))))),), blank=True, help_text='Further secondary literature about the author and his works aimed at academic users.', verbose_name='Secondary literature'),
        ),
        migrations.AlterField(
            model_name='level3page',
            name='secondary_literature_cs',
            field=wagtail.core.fields.StreamField((('paragraph', wagtail.core.blocks.StructBlock((('heading', wagtail.core.blocks.CharBlock(help_text='An optional heading to structure comprehensive text content.', label='Optional heading', requrired=False)), ('images', wagtail.core.blocks.ListBlock(wagtail.images.blocks.ImageChooserBlock(), help_text='Bilder die nahe des eigentlichen Textinhalts des Abschnitts platziert werden sollen.', label='Bilder')), ('content', wagtail.core.blocks.RichTextBlock(features=['bold', 'italic', 'strikethrough', 'sup', 'ol', 'ul', 'hr', 'link', 'blockquote'], help_text='Der eigentliche Textinhalt des Abschnitts.', label='Inhalt', required=True)), ('footnotes', wagtail.core.blocks.ListBlock(wagtail.core.blocks.StructBlock((('tag', wagtail.core.blocks.CharBlock(help_text="A tag that allows to link the footnote with the paragraphs text content in the form '[tag]'.", label='Linkable tag', required=True)), ('footnote', wagtail.core.blocks.RichTextBlock(features=['bold', 'italic', 'strikethrough', 'link'], help_text='Citations, comments and references.', label='Footnote')))), help_text='Optional footnotes to the text content.', label='Fußnoten')), ('editor', wagtail.core.blocks.CharBlock(help_text='Der Autor oder Übersetzer, die Autorin oder Übersetzerin des Textinhalts.', label='Editor', required=True))))),), blank=True, help_text='Further secondary literature about the author and his works aimed at academic users.', verbose_name='Secondary literature'),
        ),
        migrations.AlterField(
            model_name='level3page',
            name='secondary_literature_de',
            field=wagtail.core.fields.StreamField((('paragraph', wagtail.core.blocks.StructBlock((('heading', wagtail.core.blocks.CharBlock(help_text='An optional heading to structure comprehensive text content.', label='Optional heading', requrired=False)), ('images', wagtail.core.blocks.ListBlock(wagtail.images.blocks.ImageChooserBlock(), help_text='Bilder die nahe des eigentlichen Textinhalts des Abschnitts platziert werden sollen.', label='Bilder')), ('content', wagtail.core.blocks.RichTextBlock(features=['bold', 'italic', 'strikethrough', 'sup', 'ol', 'ul', 'hr', 'link', 'blockquote'], help_text='Der eigentliche Textinhalt des Abschnitts.', label='Inhalt', required=True)), ('footnotes', wagtail.core.blocks.ListBlock(wagtail.core.blocks.StructBlock((('tag', wagtail.core.blocks.CharBlock(help_text="A tag that allows to link the footnote with the paragraphs text content in the form '[tag]'.", label='Linkable tag', required=True)), ('footnote', wagtail.core.blocks.RichTextBlock(features=['bold', 'italic', 'strikethrough', 'link'], help_text='Citations, comments and references.', label='Footnote')))), help_text='Optional footnotes to the text content.', label='Fußnoten')), ('editor', wagtail.core.blocks.CharBlock(help_text='Der Autor oder Übersetzer, die Autorin oder Übersetzerin des Textinhalts.', label='Editor', required=True))))),), blank=True, help_text='Further secondary literature about the author and his works aimed at academic users.', verbose_name='Secondary literature'),
        ),
        migrations.AlterField(
            model_name='level3page',
            name='testimony',
            field=wagtail.core.fields.StreamField((('paragraph', wagtail.core.blocks.StructBlock((('heading', wagtail.core.blocks.CharBlock(help_text='An optional heading to structure comprehensive text content.', label='Optional heading', requrired=False)), ('images', wagtail.core.blocks.ListBlock(wagtail.images.blocks.ImageChooserBlock(), help_text='Bilder die nahe des eigentlichen Textinhalts des Abschnitts platziert werden sollen.', label='Bilder')), ('content', wagtail.core.blocks.RichTextBlock(features=['bold', 'italic', 'strikethrough', 'sup', 'ol', 'ul', 'hr', 'link', 'blockquote'], help_text='Der eigentliche Textinhalt des Abschnitts.', label='Inhalt', required=True)), ('footnotes', wagtail.core.blocks.ListBlock(wagtail.core.blocks.StructBlock((('tag', wagtail.core.blocks.CharBlock(help_text="A tag that allows to link the footnote with the paragraphs text content in the form '[tag]'.", label='Linkable tag', required=True)), ('footnote', wagtail.core.blocks.RichTextBlock(features=['bold', 'italic', 'strikethrough', 'link'], help_text='Citations, comments and references.', label='Footnote')))), help_text='Optional footnotes to the text content.', label='Fußnoten')), ('editor', wagtail.core.blocks.CharBlock(help_text='Der Autor oder Übersetzer, die Autorin oder Übersetzerin des Textinhalts.', label='Editor', required=True))))),), blank=True, help_text='TODO', verbose_name='Testimony'),
        ),
        migrations.AlterField(
            model_name='level3page',
            name='testimony_cs',
            field=wagtail.core.fields.StreamField((('paragraph', wagtail.core.blocks.StructBlock((('heading', wagtail.core.blocks.CharBlock(help_text='An optional heading to structure comprehensive text content.', label='Optional heading', requrired=False)), ('images', wagtail.core.blocks.ListBlock(wagtail.images.blocks.ImageChooserBlock(), help_text='Bilder die nahe des eigentlichen Textinhalts des Abschnitts platziert werden sollen.', label='Bilder')), ('content', wagtail.core.blocks.RichTextBlock(features=['bold', 'italic', 'strikethrough', 'sup', 'ol', 'ul', 'hr', 'link', 'blockquote'], help_text='Der eigentliche Textinhalt des Abschnitts.', label='Inhalt', required=True)), ('footnotes', wagtail.core.blocks.ListBlock(wagtail.core.blocks.StructBlock((('tag', wagtail.core.blocks.CharBlock(help_text="A tag that allows to link the footnote with the paragraphs text content in the form '[tag]'.", label='Linkable tag', required=True)), ('footnote', wagtail.core.blocks.RichTextBlock(features=['bold', 'italic', 'strikethrough', 'link'], help_text='Citations, comments and references.', label='Footnote')))), help_text='Optional footnotes to the text content.', label='Fußnoten')), ('editor', wagtail.core.blocks.CharBlock(help_text='Der Autor oder Übersetzer, die Autorin oder Übersetzerin des Textinhalts.', label='Editor', required=True))))),), blank=True, help_text='TODO', verbose_name='Testimony'),
        ),
        migrations.AlterField(
            model_name='level3page',
            name='testimony_de',
            field=wagtail.core.fields.StreamField((('paragraph', wagtail.core.blocks.StructBlock((('heading', wagtail.core.blocks.CharBlock(help_text='An optional heading to structure comprehensive text content.', label='Optional heading', requrired=False)), ('images', wagtail.core.blocks.ListBlock(wagtail.images.blocks.ImageChooserBlock(), help_text='Bilder die nahe des eigentlichen Textinhalts des Abschnitts platziert werden sollen.', label='Bilder')), ('content', wagtail.core.blocks.RichTextBlock(features=['bold', 'italic', 'strikethrough', 'sup', 'ol', 'ul', 'hr', 'link', 'blockquote'], help_text='Der eigentliche Textinhalt des Abschnitts.', label='Inhalt', required=True)), ('footnotes', wagtail.core.blocks.ListBlock(wagtail.core.blocks.StructBlock((('tag', wagtail.core.blocks.CharBlock(help_text="A tag that allows to link the footnote with the paragraphs text content in the form '[tag]'.", label='Linkable tag', required=True)), ('footnote', wagtail.core.blocks.RichTextBlock(features=['bold', 'italic', 'strikethrough', 'link'], help_text='Citations, comments and references.', label='Footnote')))), help_text='Optional footnotes to the text content.', label='Fußnoten')), ('editor', wagtail.core.blocks.CharBlock(help_text='Der Autor oder Übersetzer, die Autorin oder Übersetzerin des Textinhalts.', label='Editor', required=True))))),), blank=True, help_text='TODO', verbose_name='Testimony'),
        ),
        migrations.AlterField(
            model_name='literaryperiodpage',
            name='description',
            field=models.TextField(blank=True, help_text='A general description of the literary period and its significance.', verbose_name='Description'),
        ),
        migrations.AlterField(
            model_name='literaryperiodpage',
            name='description_cs',
            field=models.TextField(blank=True, help_text='A general description of the literary period and its significance.', verbose_name='Description'),
        ),
        migrations.AlterField(
            model_name='literaryperiodpage',
            name='description_de',
            field=models.TextField(blank=True, help_text='A general description of the literary period and its significance.', verbose_name='Description'),
        ),
        migrations.AlterField(
            model_name='locationpage',
            name='coordinates',
            field=django.contrib.gis.db.models.fields.PointField(help_text='The actual geographic location.', srid=4326, verbose_name='Location coordinates'),
        ),
        migrations.AlterField(
            model_name='locationpage',
            name='directions',
            field=models.TextField(blank=True, help_text='A short description of directions to find the location.', verbose_name='How to get there'),
        ),
        migrations.AlterField(
            model_name='locationpage',
            name='directions_cs',
            field=models.TextField(blank=True, help_text='A short description of directions to find the location.', verbose_name='How to get there'),
        ),
        migrations.AlterField(
            model_name='locationpage',
            name='directions_de',
            field=models.TextField(blank=True, help_text='A short description of directions to find the location.', verbose_name='How to get there'),
        ),
        migrations.AlterField(
            model_name='locationpage',
            name='location_type',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='locations', to='cms.LocationTypePage', verbose_name='Type of location'),
        ),
        migrations.AlterField(
            model_name='locationpagecontact',
            name='name',
            field=models.CharField(max_length=255, verbose_name='Name'),
        ),
        migrations.AlterField(
            model_name='locationpagecontact',
            name='name_cs',
            field=models.CharField(blank=True, max_length=255, verbose_name='Czech name'),
        ),
        migrations.AlterField(
            model_name='locationpagecontact',
            name='name_de',
            field=models.CharField(blank=True, max_length=255, verbose_name='German name'),
        ),
        migrations.AlterField(
            model_name='memorialsitepage',
            name='description',
            field=wagtail.core.fields.RichTextField(blank=True, help_text='A description of the memorial site and its significance to the referenced authors.', verbose_name='Description'),
        ),
        migrations.AlterField(
            model_name='memorialsitepage',
            name='description_cs',
            field=wagtail.core.fields.RichTextField(blank=True, help_text='A description of the memorial site and its significance to the referenced authors.', verbose_name='Description'),
        ),
        migrations.AlterField(
            model_name='memorialsitepage',
            name='description_de',
            field=wagtail.core.fields.RichTextField(blank=True, help_text='A description of the memorial site and its significance to the referenced authors.', verbose_name='Description'),
        ),
        migrations.AlterField(
            model_name='memorialsitepage',
            name='detailed_description',
            field=wagtail.core.fields.RichTextField(blank=True, help_text='A detailed description of the memorial site and its significance to the referenced authors.', verbose_name='Detailed description'),
        ),
        migrations.AlterField(
            model_name='memorialsitepage',
            name='detailed_description_cs',
            field=wagtail.core.fields.RichTextField(blank=True, help_text='A detailed description of the memorial site and its significance to the referenced authors.', verbose_name='Detailed description'),
        ),
        migrations.AlterField(
            model_name='memorialsitepage',
            name='detailed_description_de',
            field=wagtail.core.fields.RichTextField(blank=True, help_text='A detailed description of the memorial site and its significance to the referenced authors.', verbose_name='Detailed description'),
        ),
    ]
