# Generated by Django 2.0.8 on 2018-08-21 13:48

import django.contrib.gis.db.models.fields
from django.db import migrations, models
import django.db.models.deletion
import modelcluster.fields
import wagtail.core.blocks
import wagtail.core.fields
import wagtail.images.blocks


class Migration(migrations.Migration):

    dependencies = [
        ('cms', '0033_auto_20180820_1349'),
    ]

    operations = [
        migrations.CreateModel(
            name='LocationAuthor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('author', models.ForeignKey(help_text='The author that is remebered by this memorial site.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='locations', to='cms.Author', verbose_name='Author')),
            ],
            options={
                'verbose_name': 'Dedicated site',
                'verbose_name_plural': 'Dedicated sites',
                'db_table': 'cms_memorial_site_author',
            },
        ),
        migrations.CreateModel(
            name='TempLocation',
            fields=[
                ('i18npage_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='cms.I18nPage')),
                ('address', wagtail.core.fields.RichTextField(blank=True, help_text='The postal address of the location if any.', verbose_name='Address')),
                ('address_de', wagtail.core.fields.RichTextField(blank=True, help_text='The postal address of the location if any.', verbose_name='Address')),
                ('address_cs', wagtail.core.fields.RichTextField(blank=True, help_text='The postal address of the location if any.', verbose_name='Address')),
                ('contact_info', wagtail.core.fields.RichTextField(blank=True, help_text='An address, a weblink or phone contact that may be helpful to visit this place.', verbose_name='Contact info')),
                ('contact_info_de', wagtail.core.fields.RichTextField(blank=True, help_text='An address, a weblink or phone contact that may be helpful to visit this place.', verbose_name='Contact info')),
                ('contact_info_cs', wagtail.core.fields.RichTextField(blank=True, help_text='An address, a weblink or phone contact that may be helpful to visit this place.', verbose_name='Contact info')),
                ('directions', wagtail.core.fields.RichTextField(blank=True, help_text='A short description of directions to find the location.', verbose_name='How to get there')),
                ('directions_de', wagtail.core.fields.RichTextField(blank=True, help_text='A short description of directions to find the location.', verbose_name='How to get there')),
                ('directions_cs', wagtail.core.fields.RichTextField(blank=True, help_text='A short description of directions to find the location.', verbose_name='How to get there')),
                ('coordinates', django.contrib.gis.db.models.fields.PointField(help_text='The actual geographic location.', srid=4326, verbose_name='Location coordinates')),
                ('introduction', wagtail.core.fields.RichTextField(blank=True, help_text='A short introduction text.', verbose_name='Introduction')),
                ('introduction_de', wagtail.core.fields.RichTextField(blank=True, help_text='A short introduction text.', verbose_name='Introduction')),
                ('introduction_cs', wagtail.core.fields.RichTextField(blank=True, help_text='A short introduction text.', verbose_name='Introduction')),
                ('description', wagtail.core.fields.StreamField([('paragraph', wagtail.core.blocks.StructBlock([('heading', wagtail.core.blocks.CharBlock(help_text='An optional heading to structure comprehensive text content.', label='Optional heading', required=False)), ('images', wagtail.core.blocks.ListBlock(wagtail.images.blocks.ImageChooserBlock(), default=[], help_text='Images that will be displayed alongside the text content of the paragraph.', label='Images')), ('content', wagtail.core.blocks.RichTextBlock(features=['bold', 'italic', 'strikethrough', 'footnote', 'ol', 'ul', 'hr', 'link', 'blockquote'], help_text='The actual text content of this paragraph.', label='Content', required=True)), ('footnotes', wagtail.core.blocks.ListBlock(wagtail.core.blocks.StructBlock([('tag', wagtail.core.blocks.CharBlock(help_text="A tag that allows to link the footnote with the paragraphs text content in the form '[tag]'.", label='Linkable tag', required=False)), ('footnote', wagtail.core.blocks.RichTextBlock(features=['bold', 'italic', 'strikethrough', 'link'], help_text='Citations, comments and references.', label='Footnote'))]), default=[], help_text='Optional footnotes to the text content.', label='Footnotes')), ('editor', wagtail.core.blocks.CharBlock(help_text='Author or translator of the content.', label='Editor', required=True))]))], blank=True, help_text='A description of the memorial site and its significance to the referenced authors.', verbose_name='I. Memorial site')),
                ('description_de', wagtail.core.fields.StreamField([('paragraph', wagtail.core.blocks.StructBlock([('heading', wagtail.core.blocks.CharBlock(help_text='An optional heading to structure comprehensive text content.', label='Optional heading', required=False)), ('images', wagtail.core.blocks.ListBlock(wagtail.images.blocks.ImageChooserBlock(), default=[], help_text='Images that will be displayed alongside the text content of the paragraph.', label='Images')), ('content', wagtail.core.blocks.RichTextBlock(features=['bold', 'italic', 'strikethrough', 'footnote', 'ol', 'ul', 'hr', 'link', 'blockquote'], help_text='The actual text content of this paragraph.', label='Content', required=True)), ('footnotes', wagtail.core.blocks.ListBlock(wagtail.core.blocks.StructBlock([('tag', wagtail.core.blocks.CharBlock(help_text="A tag that allows to link the footnote with the paragraphs text content in the form '[tag]'.", label='Linkable tag', required=False)), ('footnote', wagtail.core.blocks.RichTextBlock(features=['bold', 'italic', 'strikethrough', 'link'], help_text='Citations, comments and references.', label='Footnote'))]), default=[], help_text='Optional footnotes to the text content.', label='Footnotes')), ('editor', wagtail.core.blocks.CharBlock(help_text='Author or translator of the content.', label='Editor', required=True))]))], blank=True, help_text='A description of the memorial site and its significance to the referenced authors.', verbose_name='I. Memorial site')),
                ('description_cs', wagtail.core.fields.StreamField([('paragraph', wagtail.core.blocks.StructBlock([('heading', wagtail.core.blocks.CharBlock(help_text='An optional heading to structure comprehensive text content.', label='Optional heading', required=False)), ('images', wagtail.core.blocks.ListBlock(wagtail.images.blocks.ImageChooserBlock(), default=[], help_text='Images that will be displayed alongside the text content of the paragraph.', label='Images')), ('content', wagtail.core.blocks.RichTextBlock(features=['bold', 'italic', 'strikethrough', 'footnote', 'ol', 'ul', 'hr', 'link', 'blockquote'], help_text='The actual text content of this paragraph.', label='Content', required=True)), ('footnotes', wagtail.core.blocks.ListBlock(wagtail.core.blocks.StructBlock([('tag', wagtail.core.blocks.CharBlock(help_text="A tag that allows to link the footnote with the paragraphs text content in the form '[tag]'.", label='Linkable tag', required=False)), ('footnote', wagtail.core.blocks.RichTextBlock(features=['bold', 'italic', 'strikethrough', 'link'], help_text='Citations, comments and references.', label='Footnote'))]), default=[], help_text='Optional footnotes to the text content.', label='Footnotes')), ('editor', wagtail.core.blocks.CharBlock(help_text='Author or translator of the content.', label='Editor', required=True))]))], blank=True, help_text='A description of the memorial site and its significance to the referenced authors.', verbose_name='I. Memorial site')),
                ('detailed_description', wagtail.core.fields.StreamField([('paragraph', wagtail.core.blocks.StructBlock([('heading', wagtail.core.blocks.CharBlock(help_text='An optional heading to structure comprehensive text content.', label='Optional heading', required=False)), ('images', wagtail.core.blocks.ListBlock(wagtail.images.blocks.ImageChooserBlock(), default=[], help_text='Images that will be displayed alongside the text content of the paragraph.', label='Images')), ('content', wagtail.core.blocks.RichTextBlock(features=['bold', 'italic', 'strikethrough', 'footnote', 'ol', 'ul', 'hr', 'link', 'blockquote'], help_text='The actual text content of this paragraph.', label='Content', required=True)), ('footnotes', wagtail.core.blocks.ListBlock(wagtail.core.blocks.StructBlock([('tag', wagtail.core.blocks.CharBlock(help_text="A tag that allows to link the footnote with the paragraphs text content in the form '[tag]'.", label='Linkable tag', required=False)), ('footnote', wagtail.core.blocks.RichTextBlock(features=['bold', 'italic', 'strikethrough', 'link'], help_text='Citations, comments and references.', label='Footnote'))]), default=[], help_text='Optional footnotes to the text content.', label='Footnotes')), ('editor', wagtail.core.blocks.CharBlock(help_text='Author or translator of the content.', label='Editor', required=True))]))], blank=True, help_text='A detailed description of the memorial site and its significance to the referenced authors.', verbose_name='II. Memorial site')),
                ('detailed_description_de', wagtail.core.fields.StreamField([('paragraph', wagtail.core.blocks.StructBlock([('heading', wagtail.core.blocks.CharBlock(help_text='An optional heading to structure comprehensive text content.', label='Optional heading', required=False)), ('images', wagtail.core.blocks.ListBlock(wagtail.images.blocks.ImageChooserBlock(), default=[], help_text='Images that will be displayed alongside the text content of the paragraph.', label='Images')), ('content', wagtail.core.blocks.RichTextBlock(features=['bold', 'italic', 'strikethrough', 'footnote', 'ol', 'ul', 'hr', 'link', 'blockquote'], help_text='The actual text content of this paragraph.', label='Content', required=True)), ('footnotes', wagtail.core.blocks.ListBlock(wagtail.core.blocks.StructBlock([('tag', wagtail.core.blocks.CharBlock(help_text="A tag that allows to link the footnote with the paragraphs text content in the form '[tag]'.", label='Linkable tag', required=False)), ('footnote', wagtail.core.blocks.RichTextBlock(features=['bold', 'italic', 'strikethrough', 'link'], help_text='Citations, comments and references.', label='Footnote'))]), default=[], help_text='Optional footnotes to the text content.', label='Footnotes')), ('editor', wagtail.core.blocks.CharBlock(help_text='Author or translator of the content.', label='Editor', required=True))]))], blank=True, help_text='A detailed description of the memorial site and its significance to the referenced authors.', verbose_name='II. Memorial site')),
                ('detailed_description_cs', wagtail.core.fields.StreamField([('paragraph', wagtail.core.blocks.StructBlock([('heading', wagtail.core.blocks.CharBlock(help_text='An optional heading to structure comprehensive text content.', label='Optional heading', required=False)), ('images', wagtail.core.blocks.ListBlock(wagtail.images.blocks.ImageChooserBlock(), default=[], help_text='Images that will be displayed alongside the text content of the paragraph.', label='Images')), ('content', wagtail.core.blocks.RichTextBlock(features=['bold', 'italic', 'strikethrough', 'footnote', 'ol', 'ul', 'hr', 'link', 'blockquote'], help_text='The actual text content of this paragraph.', label='Content', required=True)), ('footnotes', wagtail.core.blocks.ListBlock(wagtail.core.blocks.StructBlock([('tag', wagtail.core.blocks.CharBlock(help_text="A tag that allows to link the footnote with the paragraphs text content in the form '[tag]'.", label='Linkable tag', required=False)), ('footnote', wagtail.core.blocks.RichTextBlock(features=['bold', 'italic', 'strikethrough', 'link'], help_text='Citations, comments and references.', label='Footnote'))]), default=[], help_text='Optional footnotes to the text content.', label='Footnotes')), ('editor', wagtail.core.blocks.CharBlock(help_text='Author or translator of the content.', label='Editor', required=True))]))], blank=True, help_text='A detailed description of the memorial site and its significance to the referenced authors.', verbose_name='II. Memorial site')),
                ('memorial_type_tags', modelcluster.fields.ParentalManyToManyField(db_table='cms_memorial_site_tag_memorial_type', help_text='The location types that describe this location best.', related_name='memorial_site', to='cms.LocationTypeTag', verbose_name='Location types')),
                ('title_image', models.ForeignKey(blank=True, help_text='A meaningful image that will be used to present the memorial site to the user.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='cms.ImageMedia', verbose_name='Title image')),
            ],
            options={
                'verbose_name': 'Location',
                'verbose_name_plural': 'Memorial sites',
                'db_table': 'cms_location',
            },
            bases=('cms.i18npage',),
        ),
        migrations.AddField(
            model_name='locationauthor',
            name='memorial_site',
            field=modelcluster.fields.ParentalKey(help_text='The memorial site this mapping references to.', on_delete=django.db.models.deletion.CASCADE, related_name='authors', to='cms.TempLocation', verbose_name='Memorial site'),
        ),
    ]
