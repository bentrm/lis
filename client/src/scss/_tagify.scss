@import "variables.scss";

.tagify{
    $self: &;
    $tags-border-color       : $secondary;
    $tags-hover-border-color : $primary-100;
    $tags-focus-border-color : $primary;

    $tagMargin           : 3px;
    $tagPad              : $badge-padding-x $badge-padding-y;
    $tag-text-color      : $body-color;
    $tag-bg              : $gray-200;
    $tag-hover           : $gray-200;
    $tag-remove          : $danger;
    $invalid-input-color : $danger;
    $showX               : true;

    // CSS variables
    --tag-bg     : #{$tag-bg};
    --tag-hover  : #{$tag-hover};

    @mixin placeholder( $show:true, $opacity:.5 ){
        transition:.2s ease-out;
        @if $show == true {
            opacity:$opacity; transform:none;
        }
        @else {
            opacity:0; transform:translatex(6px);
        }
    }

    @mixin tagReadonlyBG{
        $draken-color : darken($tag-bg, 6);
        background: linear-gradient(45deg, $draken-color 25%, transparent 25%, transparent 50%, $draken-color 50%, $draken-color 75%, transparent 75%, transparent) 0/5px 5px;
        box-shadow: none;
    }

    @keyframes tags--bump{
        30% { transform: scale(1.2); }
    }

    display       : flex;
    align-items   : flex-start;
    flex-wrap     : wrap;
    border        : 1px solid $tags-border-color;
    padding       : 0;
    cursor        : text;
    position      : relative;
    transition    : .1s;

    &:hover{ border-color:$tags-hover-border-color; }
    &.tagify--focus{ border-color: $tags-focus-border-color; }

    // Global "read-only" mode (no input button)
    &[readonly]{
        cursor: default;
        > #{ $self }__input{
            visibility: hidden;
            width: 0;
            margin: $tagMargin 0;
        }
        #{ $self }__tag__removeBtn{ display:none; }
        #{ $self }__tag > div{
            padding: $tagPad;
            &::before{
                @include tagReadonlyBG;
            }
        }
    }

    ///////////////////////////////////////////
    // Hides originals
    + input,
    + textarea{ border:0; display:none; }

    &__tag{
        display        : inline-block;
        margin         : $tagMargin 0 $tagMargin $tagMargin;
        //  vertical-align : top;
        position       : relative;
        z-index        : 1;
        cursor         : default;
        transition     : .13s ease-out;

        &.tagify--editable{
            > div{
                &::before{
                    box-shadow: 0 0 0 2px $tag-hover inset !important;
                    box-shadow: 0 0 0 2px var(--tag-hover) inset !important;
                }
            }

            &.tagify--invalid{
                > div{
                    &::before{
                        box-shadow: 0 0 0 2px $invalid-input-color inset !important;
                    }
                }
            }
        }

        > div{  // :not([contenteditable])
            vertical-align : top;
            position       : relative;
            box-sizing     : border-box;
            max-width      : 100%;
            padding        : $tagPad;
            color          : $tag-text-color;
            border-radius  : 3px;
            user-select    : none;
            transition     : .13s ease-out;

            > *{
                white-space    : nowrap;
                overflow       : hidden;
                text-overflow  : ellipsis;
                display        : inline-block;
                vertical-align : top;

                &[contenteditable]{
                    outline: none;
                }
                //  width          : 100%;
                //       transition     : .1s;
            }

            @if $showX {
                padding-right: 1.25rem;
            }

            &::before{
                content: '';
                position: absolute;
                border-radius: inherit;
                left:0; top:0; right:0; bottom:0;
                box-shadow: 0 0 0 $font-size-base $tag-bg inset;
                box-shadow: 0 0 0 $font-size-base var(--tag-bg) inset;
                z-index: -1;
                pointer-events:none;
                transition: 120ms ease;
                animation : tags--bump .3s ease-out 1;
            }
        }

        &:hover:not([readonly]){
            div{  // :not([contenteditable])
                &::before{
                    $size: -$tagMargin/2;
                    $size: -2px;
                    top:$size; right:$size; bottom:$size; left:$size;
                    box-shadow: 0 0 0 $font-size-base $tag-hover inset;
                    box-shadow: 0 0 0 $font-size-base var(--tag-hover) inset;
                    //  box-shadow: 0 0 0 0 $tag-remove inset
                }
                // background:nth($tagColor,2);
                //background:none;
                // box-shadow: 0 0 0 2px $tag-hover inset;
                // transition:50ms;
            }
        }

        &#{ $self }{
            &--noAnim{ animation:none; }

            &--hide{
                width          : 0 !important;
                padding-left   : 0;
                padding-right  : 0;
                margin-left    : 0;
                margin-right   : 0;
                opacity        : 0;
                transform      : scale(0);
                transition     : .3s;
                pointer-events : none;
            }

            &--mark{
                div::before{ animation:none; }
            }

            &--notAllowed{
                div{
                    > span{ opacity:.5; } // filter:blur(.2px);
                    &::before{
                        box-shadow: 0 0 0 20px rgba($tag-remove, .44) inset !important;
                        transition: .2s;
                    }
                }
            }
        }

        &[readonly]{
            #{ $self }__tag__removeBtn{ display:none; }
            > div{ padding: $tagPad;
                &::before{
                    @include tagReadonlyBG;
                }
            }
        }
    }

    &__tag__removeBtn{
        $size: 14px;

        font          : #{$size}/#{$size + 2} Serif;
        width         : $size;
        height        : $size;
        text-align    : center;
        border-radius : 50px;
        position      : absolute;
        z-index       : 1;
        right         : calc(#{nth($tagPad, 2)});
        top           : 50%;
        cursor        : pointer;
        transform     : translateY(-50%);
        transition    : .2s ease-out;

        &::after{
            content:"\00D7";
        }

        &:hover{
            color:white;
            background:darken($tag-remove, 8);
            // + span{ box-shadow: 0 0 0 2px $tag-remove inset; transition:.2s; }
            + div{
                > span{ opacity:.5; } // filter:blur(.2px);
                &::before{
                    box-shadow: 0 0 0 20px rgba($tag-remove, .3) inset !important;
                    transition:.2s;
                }
            }
        }
    }


    ///////////////////////////////////////////
    // Holds the placeholder & the tags input
    &__input{
        $placeholder-width : 110px;
        @mixin placeholder-show{ opacity:.5; transform:none; };
        display: block;
        min-width: $placeholder-width;
        margin: $tagMargin;
        padding: $tagPad;
        position: relative;

        &:empty::before{ @include placeholder; }

        &:focus{ outline:none;
            &::before{ @include placeholder(false);
                @supports ( -moz-appearance:none ){
                    display:none;
                }
            }
            &:empty::before{ @include placeholder(true, .3);
                @supports ( -moz-appearance:none ){
                    display:inline-block;
                }
            }
        }
        // &:empty:focus{ padding:$tagPad; }

        &::before{
            content: attr(data-placeholder);
            line-height: 1.8;
            position: absolute;
            top: 0;
            z-index: 1;
            color: $tag-text-color;
            white-space: nowrap;
            pointer-events: none;
            opacity: 0;
        }

        @supports ( -moz-appearance:none ){
            &::before{
                line-height: inherit;
                position:relative;
            }
        }

        // tries to suggest the rest of the value from the first item in the whitelist which matches it
        &::after{
            content: attr(data-suggest);
            color: $tag-text-color;
            opacity: .3;
            pointer-events:none;
        }

        // &--invalid{
        //     // color: $invalid-input-color;
        // }

        /*
            in "mix mode" the tags are inside the "input" element
        */
        #{ $self }__tag{
            line-height: 1.1;

            > div{
                padding-top:0; padding-bottom:0;

                &::before{
                    top:-3px; bottom:-3px;
                }
            }

            &:hover:not([readonly]){
                > div{
                    &::before{
                        top:-3px; bottom:-3px;
                        left:0; right:0;
                    }
                }
            }
        }
    }

    &--mix #{ $self }__input{
        padding: $tagMargin;
        margin: 0;
        width: 100%;
        height: 100%;
        line-height: 1.7;
    }

    &__dropdown{
        position: absolute;
        z-index: 999;
        background: white;

        max-height: 300px;
        overflow: auto;
        border: 1px solid $tags-focus-border-color;
        box-shadow: 0 2px 4px -2px rgba(black,.2);
        box-sizing: border-box;


        &__item{
            box-sizing: inherit;
            padding: .1rem .3rem;
            margin: 2px;
            cursor: pointer;
            border-radius: 3px;
            position: relative;
            outline:none;

            &--active{ background:$tag-bg; }
            &:active{ background:lighten($tag-bg, 5); }
        }
    }
}

.filter-suggestion-list {
    font-size: 0.75rem;
    max-height: 100px;
    overflow: auto;
    border: $border-width solid $border-color;
    margin-top: 3px;
}
