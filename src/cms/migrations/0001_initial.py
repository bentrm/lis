# Generated by Django 2.0.2 on 2018-04-17 15:00

from django.conf import settings
import django.contrib.gis.db.models.fields
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import modelcluster.fields
import taggit.managers
import wagtail.core.blocks
import wagtail.core.fields
import wagtail.core.models
import wagtail.images.blocks
import wagtail.images.models
import wagtail.search.index


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('taggit', '0002_auto_20150616_2121'),
        ('wagtailcore', '0040_page_draft_title'),
    ]

    operations = [
        migrations.CreateModel(
            name='AuthorLiteraryCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
            ],
            options={
                'db_table': 'author_literary_category',
            },
        ),
        migrations.CreateModel(
            name='AuthorLiteraryPeriod',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
            ],
            options={
                'db_table': 'author_literary_period',
            },
        ),
        migrations.CreateModel(
            name='AuthorPageName',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('title', models.CharField(blank=True, max_length=255, verbose_name='Title')),
                ('title_de', models.CharField(blank=True, max_length=255, verbose_name='Title')),
                ('title_cs', models.CharField(blank=True, max_length=255, verbose_name='Title')),
                ('first_name', models.CharField(blank=True, max_length=255, verbose_name='First name')),
                ('first_name_de', models.CharField(blank=True, max_length=255, verbose_name='First name')),
                ('first_name_cs', models.CharField(blank=True, max_length=255, verbose_name='First name')),
                ('last_name', models.CharField(max_length=255, verbose_name='Last name')),
                ('last_name_de', models.CharField(blank=True, max_length=255, verbose_name='Last name')),
                ('last_name_cs', models.CharField(blank=True, max_length=255, verbose_name='Last name')),
                ('birth_name', models.CharField(blank=True, max_length=255, verbose_name='Birth name')),
                ('birth_name_de', models.CharField(blank=True, max_length=255, verbose_name='Birth name')),
                ('birth_name_cs', models.CharField(blank=True, max_length=255, verbose_name='Birth name')),
                ('is_pseudonym', models.BooleanField(default=False)),
            ],
            options={
                'ordering': ['sort_order'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DocumentMedia',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255, verbose_name='title')),
                ('file', models.FileField(upload_to='documents', verbose_name='file')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('title_de', models.CharField(blank=True, max_length=255, null=True, verbose_name='Title (de)')),
                ('title_cs', models.CharField(blank=True, max_length=255, null=True, verbose_name='Title (cz)')),
                ('alt_title', models.CharField(blank=True, max_length=1024, null=True, verbose_name='Alternative title')),
                ('alt_title_de', models.CharField(blank=True, max_length=1024, null=True, verbose_name='Alternative title (de)')),
                ('alt_title_cs', models.CharField(blank=True, max_length=1024, null=True, verbose_name='Alternative title (cz)')),
                ('caption', models.CharField(blank=True, max_length=1024, null=True, verbose_name='Media caption')),
                ('caption_de', models.CharField(blank=True, max_length=1024, null=True, verbose_name='Media caption (de)')),
                ('caption_cs', models.CharField(blank=True, max_length=1024, null=True, verbose_name='Media caption (cz)')),
                ('collection', models.ForeignKey(default=wagtail.core.models.get_root_collection_id, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='wagtailcore.Collection', verbose_name='collection')),
                ('tags', taggit.managers.TaggableManager(blank=True, help_text=None, through='taggit.TaggedItem', to='taggit.Tag', verbose_name='tags')),
                ('uploaded_by_user', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='uploaded by user')),
            ],
            options={
                'db_table': 'document',
            },
            bases=(wagtail.search.index.Indexed, models.Model),
        ),
        migrations.CreateModel(
            name='I18nPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.Page')),
                ('title_de', models.CharField(blank=True, help_text="The page title as you'd like it to be seen by the public", max_length=255, verbose_name='title')),
                ('title_cs', models.CharField(blank=True, help_text="The page title as you'd like it to be seen by the public", max_length=255, verbose_name='title')),
                ('draft_title_de', models.CharField(blank=True, editable=False, max_length=255)),
                ('draft_title_cs', models.CharField(blank=True, editable=False, max_length=255)),
                ('editor', models.CharField(help_text='Name of the author of this content.', max_length=2048, verbose_name='Editor')),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='ImageMedia',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255, verbose_name='title')),
                ('file', models.ImageField(height_field='height', upload_to=wagtail.images.models.get_upload_to, verbose_name='file', width_field='width')),
                ('width', models.IntegerField(editable=False, verbose_name='width')),
                ('height', models.IntegerField(editable=False, verbose_name='height')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='created at')),
                ('focal_point_x', models.PositiveIntegerField(blank=True, null=True)),
                ('focal_point_y', models.PositiveIntegerField(blank=True, null=True)),
                ('focal_point_width', models.PositiveIntegerField(blank=True, null=True)),
                ('focal_point_height', models.PositiveIntegerField(blank=True, null=True)),
                ('file_size', models.PositiveIntegerField(editable=False, null=True)),
                ('title_de', models.CharField(blank=True, max_length=255, null=True, verbose_name='Title (de)')),
                ('title_cs', models.CharField(blank=True, max_length=255, null=True, verbose_name='Title (cz)')),
                ('alt_title', models.CharField(blank=True, max_length=1024, null=True, verbose_name='Alternative title')),
                ('alt_title_de', models.CharField(blank=True, max_length=1024, null=True, verbose_name='Alternative title (de)')),
                ('alt_title_cs', models.CharField(blank=True, max_length=1024, null=True, verbose_name='Alternative title (cz)')),
                ('caption', models.CharField(blank=True, max_length=1024, null=True, verbose_name='Media caption')),
                ('caption_de', models.CharField(blank=True, max_length=1024, null=True, verbose_name='Media caption (de)')),
                ('caption_cs', models.CharField(blank=True, max_length=1024, null=True, verbose_name='Media caption (cz)')),
                ('collection', models.ForeignKey(default=wagtail.core.models.get_root_collection_id, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='wagtailcore.Collection', verbose_name='collection')),
                ('tags', taggit.managers.TaggableManager(blank=True, help_text=None, through='taggit.TaggedItem', to='taggit.Tag', verbose_name='tags')),
                ('uploaded_by_user', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='uploaded by user')),
            ],
            options={
                'db_table': 'image',
            },
            bases=(wagtail.search.index.Indexed, models.Model),
        ),
        migrations.CreateModel(
            name='ImageMediaRendition',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('filter_spec', models.CharField(db_index=True, max_length=255)),
                ('file', models.ImageField(height_field='height', upload_to=wagtail.images.models.get_rendition_upload_to, width_field='width')),
                ('width', models.IntegerField(editable=False)),
                ('height', models.IntegerField(editable=False)),
                ('focal_point_key', models.CharField(blank=True, default='', editable=False, max_length=16)),
                ('image', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='renditions', to='cms.ImageMedia')),
            ],
            options={
                'db_table': 'image_rendition',
            },
        ),
        migrations.CreateModel(
            name='LocationPageContact',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('name', models.CharField(blank=True, max_length=255, verbose_name='First name')),
                ('name_de', models.CharField(blank=True, max_length=255, verbose_name='First name')),
                ('name_cs', models.CharField(blank=True, max_length=255, verbose_name='First name')),
            ],
            options={
                'ordering': ['sort_order'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='MemorialSiteAuthor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
            ],
            options={
                'db_table': 'memorial_site_author',
            },
        ),
        migrations.CreateModel(
            name='AuthorPage',
            fields=[
                ('i18npage_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='cms.I18nPage')),
                ('sex', models.CharField(choices=[('U', 'Unknown'), ('M', 'Male'), ('F', 'Female')], default='U', max_length=1)),
                ('date_of_birth_year', models.PositiveSmallIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(9999)], verbose_name='Year of birth')),
                ('date_of_birth_month', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'January'), (2, 'February'), (3, 'March'), (4, 'April'), (5, 'May'), (6, 'June'), (7, 'July'), (8, 'August'), (9, 'September'), (10, 'October'), (11, 'November'), (12, 'December')], null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(12)], verbose_name='Month of birth')),
                ('date_of_birth_day', models.PositiveSmallIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(31)], verbose_name='Day of birth')),
                ('date_of_death_year', models.PositiveSmallIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(9999)], verbose_name='Year of death')),
                ('date_of_death_month', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'January'), (2, 'February'), (3, 'March'), (4, 'April'), (5, 'May'), (6, 'June'), (7, 'July'), (8, 'August'), (9, 'September'), (10, 'October'), (11, 'November'), (12, 'December')], null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(12)], verbose_name='Month of death')),
                ('date_of_death_day', models.PositiveSmallIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(31)], verbose_name='Day of death')),
                ('title_image', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='cms.ImageMedia')),
            ],
            options={
                'verbose_name': 'Author',
                'verbose_name_plural': 'Authors',
            },
            bases=('cms.i18npage',),
        ),
        migrations.CreateModel(
            name='AuthorsPage',
            fields=[
                ('i18npage_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='cms.I18nPage')),
            ],
            options={
                'verbose_name': 'Authors',
                'db_table': 'authors',
            },
            bases=('cms.i18npage',),
        ),
        migrations.CreateModel(
            name='ContactTypePage',
            fields=[
                ('i18npage_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='cms.I18nPage')),
            ],
            options={
                'verbose_name': 'Contact type',
                'verbose_name_plural': 'Contact types',
                'db_table': 'contact_type',
            },
            bases=('cms.i18npage',),
        ),
        migrations.CreateModel(
            name='ContactTypesPage',
            fields=[
                ('i18npage_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='cms.I18nPage')),
            ],
            options={
                'verbose_name': 'Contact types',
                'db_table': 'contact_types',
            },
            bases=('cms.i18npage',),
        ),
        migrations.CreateModel(
            name='HomePage',
            fields=[
                ('i18npage_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='cms.I18nPage')),
            ],
            options={
                'verbose_name': 'Homepage',
                'db_table': 'homepage',
            },
            bases=('cms.i18npage',),
        ),
        migrations.CreateModel(
            name='Level1Page',
            fields=[
                ('i18npage_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='cms.I18nPage')),
                ('biography', wagtail.core.fields.StreamField((('Paragraph', wagtail.core.blocks.StructBlock((('images', wagtail.core.blocks.ListBlock(wagtail.images.blocks.ImageChooserBlock())), ('content', wagtail.core.blocks.RichTextBlock(features=['bold', 'italic', 'strikethrough', 'sup', 'ol', 'ul', 'hr', 'link', 'blockquote'], help_text='Content of the text block.', required=True)), ('footnotes', wagtail.core.blocks.ListBlock(wagtail.core.blocks.RichTextBlock(features=['bold', 'italic', 'strikethrough', 'link']), help_text="Citations and comments. The item number can be linked in the content, i.e. '[1]'.")), ('editor', wagtail.core.blocks.CharBlock(help_text='Author or translator of the content.', required=True))))),), blank=True)),
                ('biography_de', wagtail.core.fields.StreamField((('Paragraph', wagtail.core.blocks.StructBlock((('images', wagtail.core.blocks.ListBlock(wagtail.images.blocks.ImageChooserBlock())), ('content', wagtail.core.blocks.RichTextBlock(features=['bold', 'italic', 'strikethrough', 'sup', 'ol', 'ul', 'hr', 'link', 'blockquote'], help_text='Content of the text block.', required=True)), ('footnotes', wagtail.core.blocks.ListBlock(wagtail.core.blocks.RichTextBlock(features=['bold', 'italic', 'strikethrough', 'link']), help_text="Citations and comments. The item number can be linked in the content, i.e. '[1]'.")), ('editor', wagtail.core.blocks.CharBlock(help_text='Author or translator of the content.', required=True))))),), blank=True)),
                ('biography_cs', wagtail.core.fields.StreamField((('Paragraph', wagtail.core.blocks.StructBlock((('images', wagtail.core.blocks.ListBlock(wagtail.images.blocks.ImageChooserBlock())), ('content', wagtail.core.blocks.RichTextBlock(features=['bold', 'italic', 'strikethrough', 'sup', 'ol', 'ul', 'hr', 'link', 'blockquote'], help_text='Content of the text block.', required=True)), ('footnotes', wagtail.core.blocks.ListBlock(wagtail.core.blocks.RichTextBlock(features=['bold', 'italic', 'strikethrough', 'link']), help_text="Citations and comments. The item number can be linked in the content, i.e. '[1]'.")), ('editor', wagtail.core.blocks.CharBlock(help_text='Author or translator of the content.', required=True))))),), blank=True)),
                ('works', wagtail.core.fields.StreamField((('Paragraph', wagtail.core.blocks.StructBlock((('images', wagtail.core.blocks.ListBlock(wagtail.images.blocks.ImageChooserBlock())), ('content', wagtail.core.blocks.RichTextBlock(features=['bold', 'italic', 'strikethrough', 'sup', 'ol', 'ul', 'hr', 'link', 'blockquote'], help_text='Content of the text block.', required=True)), ('footnotes', wagtail.core.blocks.ListBlock(wagtail.core.blocks.RichTextBlock(features=['bold', 'italic', 'strikethrough', 'link']), help_text="Citations and comments. The item number can be linked in the content, i.e. '[1]'.")), ('editor', wagtail.core.blocks.CharBlock(help_text='Author or translator of the content.', required=True))))),), blank=True)),
                ('works_de', wagtail.core.fields.StreamField((('Paragraph', wagtail.core.blocks.StructBlock((('images', wagtail.core.blocks.ListBlock(wagtail.images.blocks.ImageChooserBlock())), ('content', wagtail.core.blocks.RichTextBlock(features=['bold', 'italic', 'strikethrough', 'sup', 'ol', 'ul', 'hr', 'link', 'blockquote'], help_text='Content of the text block.', required=True)), ('footnotes', wagtail.core.blocks.ListBlock(wagtail.core.blocks.RichTextBlock(features=['bold', 'italic', 'strikethrough', 'link']), help_text="Citations and comments. The item number can be linked in the content, i.e. '[1]'.")), ('editor', wagtail.core.blocks.CharBlock(help_text='Author or translator of the content.', required=True))))),), blank=True)),
                ('works_cs', wagtail.core.fields.StreamField((('Paragraph', wagtail.core.blocks.StructBlock((('images', wagtail.core.blocks.ListBlock(wagtail.images.blocks.ImageChooserBlock())), ('content', wagtail.core.blocks.RichTextBlock(features=['bold', 'italic', 'strikethrough', 'sup', 'ol', 'ul', 'hr', 'link', 'blockquote'], help_text='Content of the text block.', required=True)), ('footnotes', wagtail.core.blocks.ListBlock(wagtail.core.blocks.RichTextBlock(features=['bold', 'italic', 'strikethrough', 'link']), help_text="Citations and comments. The item number can be linked in the content, i.e. '[1]'.")), ('editor', wagtail.core.blocks.CharBlock(help_text='Author or translator of the content.', required=True))))),), blank=True)),
            ],
            options={
                'verbose_name': 'I. Discover page',
                'db_table': 'level_1',
            },
            bases=('cms.i18npage',),
        ),
        migrations.CreateModel(
            name='Level2Page',
            fields=[
                ('i18npage_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='cms.I18nPage')),
                ('perception', wagtail.core.fields.StreamField((('Paragraph', wagtail.core.blocks.StructBlock((('images', wagtail.core.blocks.ListBlock(wagtail.images.blocks.ImageChooserBlock())), ('content', wagtail.core.blocks.RichTextBlock(features=['bold', 'italic', 'strikethrough', 'sup', 'ol', 'ul', 'hr', 'link', 'blockquote'], help_text='Content of the text block.', required=True)), ('footnotes', wagtail.core.blocks.ListBlock(wagtail.core.blocks.RichTextBlock(features=['bold', 'italic', 'strikethrough', 'link']), help_text="Citations and comments. The item number can be linked in the content, i.e. '[1]'.")), ('editor', wagtail.core.blocks.CharBlock(help_text='Author or translator of the content.', required=True))))),), blank=True)),
                ('perception_de', wagtail.core.fields.StreamField((('Paragraph', wagtail.core.blocks.StructBlock((('images', wagtail.core.blocks.ListBlock(wagtail.images.blocks.ImageChooserBlock())), ('content', wagtail.core.blocks.RichTextBlock(features=['bold', 'italic', 'strikethrough', 'sup', 'ol', 'ul', 'hr', 'link', 'blockquote'], help_text='Content of the text block.', required=True)), ('footnotes', wagtail.core.blocks.ListBlock(wagtail.core.blocks.RichTextBlock(features=['bold', 'italic', 'strikethrough', 'link']), help_text="Citations and comments. The item number can be linked in the content, i.e. '[1]'.")), ('editor', wagtail.core.blocks.CharBlock(help_text='Author or translator of the content.', required=True))))),), blank=True)),
                ('perception_cs', wagtail.core.fields.StreamField((('Paragraph', wagtail.core.blocks.StructBlock((('images', wagtail.core.blocks.ListBlock(wagtail.images.blocks.ImageChooserBlock())), ('content', wagtail.core.blocks.RichTextBlock(features=['bold', 'italic', 'strikethrough', 'sup', 'ol', 'ul', 'hr', 'link', 'blockquote'], help_text='Content of the text block.', required=True)), ('footnotes', wagtail.core.blocks.ListBlock(wagtail.core.blocks.RichTextBlock(features=['bold', 'italic', 'strikethrough', 'link']), help_text="Citations and comments. The item number can be linked in the content, i.e. '[1]'.")), ('editor', wagtail.core.blocks.CharBlock(help_text='Author or translator of the content.', required=True))))),), blank=True)),
            ],
            options={
                'verbose_name': 'II. Deepen page',
                'db_table': 'level_2',
            },
            bases=('cms.i18npage',),
        ),
        migrations.CreateModel(
            name='Level3Page',
            fields=[
                ('i18npage_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='cms.I18nPage')),
                ('primary_literature', wagtail.core.fields.StreamField((('Paragraph', wagtail.core.blocks.StructBlock((('images', wagtail.core.blocks.ListBlock(wagtail.images.blocks.ImageChooserBlock())), ('content', wagtail.core.blocks.RichTextBlock(features=['bold', 'italic', 'strikethrough', 'sup', 'ol', 'ul', 'hr', 'link', 'blockquote'], help_text='Content of the text block.', required=True)), ('footnotes', wagtail.core.blocks.ListBlock(wagtail.core.blocks.RichTextBlock(features=['bold', 'italic', 'strikethrough', 'link']), help_text="Citations and comments. The item number can be linked in the content, i.e. '[1]'.")), ('editor', wagtail.core.blocks.CharBlock(help_text='Author or translator of the content.', required=True))))),), blank=True)),
                ('primary_literature_de', wagtail.core.fields.StreamField((('Paragraph', wagtail.core.blocks.StructBlock((('images', wagtail.core.blocks.ListBlock(wagtail.images.blocks.ImageChooserBlock())), ('content', wagtail.core.blocks.RichTextBlock(features=['bold', 'italic', 'strikethrough', 'sup', 'ol', 'ul', 'hr', 'link', 'blockquote'], help_text='Content of the text block.', required=True)), ('footnotes', wagtail.core.blocks.ListBlock(wagtail.core.blocks.RichTextBlock(features=['bold', 'italic', 'strikethrough', 'link']), help_text="Citations and comments. The item number can be linked in the content, i.e. '[1]'.")), ('editor', wagtail.core.blocks.CharBlock(help_text='Author or translator of the content.', required=True))))),), blank=True)),
                ('primary_literature_cs', wagtail.core.fields.StreamField((('Paragraph', wagtail.core.blocks.StructBlock((('images', wagtail.core.blocks.ListBlock(wagtail.images.blocks.ImageChooserBlock())), ('content', wagtail.core.blocks.RichTextBlock(features=['bold', 'italic', 'strikethrough', 'sup', 'ol', 'ul', 'hr', 'link', 'blockquote'], help_text='Content of the text block.', required=True)), ('footnotes', wagtail.core.blocks.ListBlock(wagtail.core.blocks.RichTextBlock(features=['bold', 'italic', 'strikethrough', 'link']), help_text="Citations and comments. The item number can be linked in the content, i.e. '[1]'.")), ('editor', wagtail.core.blocks.CharBlock(help_text='Author or translator of the content.', required=True))))),), blank=True)),
                ('testimony', wagtail.core.fields.StreamField((('Paragraph', wagtail.core.blocks.StructBlock((('images', wagtail.core.blocks.ListBlock(wagtail.images.blocks.ImageChooserBlock())), ('content', wagtail.core.blocks.RichTextBlock(features=['bold', 'italic', 'strikethrough', 'sup', 'ol', 'ul', 'hr', 'link', 'blockquote'], help_text='Content of the text block.', required=True)), ('footnotes', wagtail.core.blocks.ListBlock(wagtail.core.blocks.RichTextBlock(features=['bold', 'italic', 'strikethrough', 'link']), help_text="Citations and comments. The item number can be linked in the content, i.e. '[1]'.")), ('editor', wagtail.core.blocks.CharBlock(help_text='Author or translator of the content.', required=True))))),), blank=True)),
                ('testimony_de', wagtail.core.fields.StreamField((('Paragraph', wagtail.core.blocks.StructBlock((('images', wagtail.core.blocks.ListBlock(wagtail.images.blocks.ImageChooserBlock())), ('content', wagtail.core.blocks.RichTextBlock(features=['bold', 'italic', 'strikethrough', 'sup', 'ol', 'ul', 'hr', 'link', 'blockquote'], help_text='Content of the text block.', required=True)), ('footnotes', wagtail.core.blocks.ListBlock(wagtail.core.blocks.RichTextBlock(features=['bold', 'italic', 'strikethrough', 'link']), help_text="Citations and comments. The item number can be linked in the content, i.e. '[1]'.")), ('editor', wagtail.core.blocks.CharBlock(help_text='Author or translator of the content.', required=True))))),), blank=True)),
                ('testimony_cs', wagtail.core.fields.StreamField((('Paragraph', wagtail.core.blocks.StructBlock((('images', wagtail.core.blocks.ListBlock(wagtail.images.blocks.ImageChooserBlock())), ('content', wagtail.core.blocks.RichTextBlock(features=['bold', 'italic', 'strikethrough', 'sup', 'ol', 'ul', 'hr', 'link', 'blockquote'], help_text='Content of the text block.', required=True)), ('footnotes', wagtail.core.blocks.ListBlock(wagtail.core.blocks.RichTextBlock(features=['bold', 'italic', 'strikethrough', 'link']), help_text="Citations and comments. The item number can be linked in the content, i.e. '[1]'.")), ('editor', wagtail.core.blocks.CharBlock(help_text='Author or translator of the content.', required=True))))),), blank=True)),
                ('secondary_literature', wagtail.core.fields.StreamField((('Paragraph', wagtail.core.blocks.StructBlock((('images', wagtail.core.blocks.ListBlock(wagtail.images.blocks.ImageChooserBlock())), ('content', wagtail.core.blocks.RichTextBlock(features=['bold', 'italic', 'strikethrough', 'sup', 'ol', 'ul', 'hr', 'link', 'blockquote'], help_text='Content of the text block.', required=True)), ('footnotes', wagtail.core.blocks.ListBlock(wagtail.core.blocks.RichTextBlock(features=['bold', 'italic', 'strikethrough', 'link']), help_text="Citations and comments. The item number can be linked in the content, i.e. '[1]'.")), ('editor', wagtail.core.blocks.CharBlock(help_text='Author or translator of the content.', required=True))))),), blank=True)),
                ('secondary_literature_de', wagtail.core.fields.StreamField((('Paragraph', wagtail.core.blocks.StructBlock((('images', wagtail.core.blocks.ListBlock(wagtail.images.blocks.ImageChooserBlock())), ('content', wagtail.core.blocks.RichTextBlock(features=['bold', 'italic', 'strikethrough', 'sup', 'ol', 'ul', 'hr', 'link', 'blockquote'], help_text='Content of the text block.', required=True)), ('footnotes', wagtail.core.blocks.ListBlock(wagtail.core.blocks.RichTextBlock(features=['bold', 'italic', 'strikethrough', 'link']), help_text="Citations and comments. The item number can be linked in the content, i.e. '[1]'.")), ('editor', wagtail.core.blocks.CharBlock(help_text='Author or translator of the content.', required=True))))),), blank=True)),
                ('secondary_literature_cs', wagtail.core.fields.StreamField((('Paragraph', wagtail.core.blocks.StructBlock((('images', wagtail.core.blocks.ListBlock(wagtail.images.blocks.ImageChooserBlock())), ('content', wagtail.core.blocks.RichTextBlock(features=['bold', 'italic', 'strikethrough', 'sup', 'ol', 'ul', 'hr', 'link', 'blockquote'], help_text='Content of the text block.', required=True)), ('footnotes', wagtail.core.blocks.ListBlock(wagtail.core.blocks.RichTextBlock(features=['bold', 'italic', 'strikethrough', 'link']), help_text="Citations and comments. The item number can be linked in the content, i.e. '[1]'.")), ('editor', wagtail.core.blocks.CharBlock(help_text='Author or translator of the content.', required=True))))),), blank=True)),
            ],
            options={
                'verbose_name': 'III. Research page',
                'db_table': 'level_3',
            },
            bases=('cms.i18npage',),
        ),
        migrations.CreateModel(
            name='LiteraryCategoriesPage',
            fields=[
                ('i18npage_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='cms.I18nPage')),
            ],
            options={
                'verbose_name': 'Literary categories',
                'db_table': 'literary_categories',
            },
            bases=('cms.i18npage',),
        ),
        migrations.CreateModel(
            name='LiteraryCategoryPage',
            fields=[
                ('i18npage_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='cms.I18nPage')),
            ],
            options={
                'verbose_name': 'Literary category',
                'verbose_name_plural': 'Literary categories',
                'db_table': 'literary_category',
            },
            bases=('cms.i18npage',),
        ),
        migrations.CreateModel(
            name='LiteraryPeriodPage',
            fields=[
                ('i18npage_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='cms.I18nPage')),
                ('description', models.TextField(blank=True)),
                ('description_de', models.TextField(blank=True)),
                ('description_cs', models.TextField(blank=True)),
            ],
            options={
                'abstract': False,
            },
            bases=('cms.i18npage',),
        ),
        migrations.CreateModel(
            name='LiteraryPeriodsPage',
            fields=[
                ('i18npage_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='cms.I18nPage')),
            ],
            options={
                'verbose_name': 'Literary periods',
                'db_table': 'literary_periods',
            },
            bases=('cms.i18npage',),
        ),
        migrations.CreateModel(
            name='LocationPage',
            fields=[
                ('i18npage_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='cms.I18nPage')),
                ('description', models.TextField(blank=True)),
                ('description_de', models.TextField(blank=True)),
                ('description_cs', models.TextField(blank=True)),
                ('address', models.TextField(blank=True)),
                ('address_de', models.TextField(blank=True)),
                ('address_cs', models.TextField(blank=True)),
                ('directions', models.TextField(blank=True)),
                ('directions_de', models.TextField(blank=True)),
                ('directions_cs', models.TextField(blank=True)),
                ('coordinates', django.contrib.gis.db.models.fields.PointField(blank=True, null=True, srid=4326)),
            ],
            options={
                'verbose_name': 'Location',
                'verbose_name_plural': 'Locations',
                'db_table': 'location',
            },
            bases=('cms.i18npage',),
        ),
        migrations.CreateModel(
            name='LocationsPage',
            fields=[
                ('i18npage_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='cms.I18nPage')),
            ],
            options={
                'verbose_name': 'Locations',
                'db_table': 'locations',
            },
            bases=('cms.i18npage',),
        ),
        migrations.CreateModel(
            name='LocationTypePage',
            fields=[
                ('i18npage_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='cms.I18nPage')),
            ],
            options={
                'verbose_name': 'Location type',
                'verbose_name_plural': 'Location types',
                'db_table': 'location_type',
            },
            bases=('cms.i18npage',),
        ),
        migrations.CreateModel(
            name='LocationTypesPage',
            fields=[
                ('i18npage_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='cms.I18nPage')),
            ],
            options={
                'verbose_name': 'Location types',
                'db_table': 'location_types',
            },
            bases=('cms.i18npage',),
        ),
        migrations.CreateModel(
            name='MemorialSitePage',
            fields=[
                ('i18npage_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='cms.I18nPage')),
                ('description', wagtail.core.fields.RichTextField(blank=True)),
                ('description_de', wagtail.core.fields.RichTextField(blank=True)),
                ('description_cs', wagtail.core.fields.RichTextField(blank=True)),
                ('title_image', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='cms.ImageMedia')),
            ],
            options={
                'verbose_name': 'Memorial site',
                'verbose_name_plural': 'Memorial sites',
                'db_table': 'mermorial_site',
            },
            bases=('cms.i18npage',),
        ),
        migrations.AddField(
            model_name='memorialsiteauthor',
            name='author',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='memorial_sites', to='cms.AuthorPage'),
        ),
        migrations.AddField(
            model_name='memorialsiteauthor',
            name='memorial_site',
            field=modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='authors', to='cms.MemorialSitePage'),
        ),
        migrations.AddField(
            model_name='locationpagecontact',
            name='contact_type',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='contacts', to='cms.ContactTypePage'),
        ),
        migrations.AddField(
            model_name='locationpagecontact',
            name='location',
            field=modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='contacts', to='cms.LocationPage'),
        ),
        migrations.AddField(
            model_name='locationpage',
            name='location_type',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='locations', to='cms.LocationTypePage'),
        ),
        migrations.AddField(
            model_name='locationpage',
            name='title_image',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='cms.ImageMedia'),
        ),
        migrations.AlterUniqueTogether(
            name='imagemediarendition',
            unique_together={('image', 'filter_spec', 'focal_point_key')},
        ),
        migrations.AddField(
            model_name='authorpagename',
            name='author',
            field=modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='names', to='cms.AuthorPage'),
        ),
        migrations.AddField(
            model_name='authorliteraryperiod',
            name='author',
            field=modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='literary_periods', to='cms.AuthorPage'),
        ),
        migrations.AddField(
            model_name='authorliteraryperiod',
            name='literary_period',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='authors', to='cms.LiteraryPeriodPage'),
        ),
        migrations.AddField(
            model_name='authorliterarycategory',
            name='author',
            field=modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='literary_categories', to='cms.AuthorPage'),
        ),
        migrations.AddField(
            model_name='authorliterarycategory',
            name='literary_category',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='authors', to='cms.LiteraryCategoryPage'),
        ),
    ]
