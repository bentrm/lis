# Generated by Django 2.0.2 on 2018-04-17 19:23

import django.contrib.gis.db.models.fields
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import modelcluster.fields
import wagtail.core.blocks
import wagtail.core.fields
import wagtail.images.blocks


class Migration(migrations.Migration):

    dependencies = [
        ('cms', '0002_auto_20180417_1817'),
    ]

    operations = [
        migrations.AlterField(
            model_name='authorliterarycategory',
            name='literary_category',
            field=models.ForeignKey(help_text='Literary category that the author has been active in.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='authors', to='cms.LiteraryCategoryPage', verbose_name='Literary category'),
        ),
        migrations.AlterField(
            model_name='authorliteraryperiod',
            name='author',
            field=modelcluster.fields.ParentalKey(help_text='Author that this mapping is referencing.', on_delete=django.db.models.deletion.CASCADE, related_name='literary_periods', to='cms.AuthorPage', verbose_name='Author'),
        ),
        migrations.AlterField(
            model_name='authorliteraryperiod',
            name='literary_period',
            field=models.ForeignKey(help_text='Literary period that the author has been active in.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='authors', to='cms.LiteraryPeriodPage', verbose_name='Literary period'),
        ),
        migrations.AlterField(
            model_name='authorpage',
            name='date_of_birth_day',
            field=models.PositiveSmallIntegerField(blank=True, help_text='The day that the author is born in.', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(31)], verbose_name='Day of birth'),
        ),
        migrations.AlterField(
            model_name='authorpage',
            name='date_of_birth_month',
            field=models.PositiveSmallIntegerField(blank=True, choices=[(1, 'January'), (2, 'February'), (3, 'March'), (4, 'April'), (5, 'May'), (6, 'June'), (7, 'July'), (8, 'August'), (9, 'September'), (10, 'October'), (11, 'November'), (12, 'December')], help_text='The month that the author is born in.', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(12)], verbose_name='Month of birth'),
        ),
        migrations.AlterField(
            model_name='authorpage',
            name='date_of_birth_year',
            field=models.PositiveSmallIntegerField(blank=True, help_text='The year that the author is born in.', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(9999)], verbose_name='Year of birth'),
        ),
        migrations.AlterField(
            model_name='authorpage',
            name='date_of_death_day',
            field=models.PositiveSmallIntegerField(blank=True, help_text='The day that the author has died at.', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(31)], verbose_name='Day of death'),
        ),
        migrations.AlterField(
            model_name='authorpage',
            name='date_of_death_month',
            field=models.PositiveSmallIntegerField(blank=True, choices=[(1, 'January'), (2, 'February'), (3, 'March'), (4, 'April'), (5, 'May'), (6, 'June'), (7, 'July'), (8, 'August'), (9, 'September'), (10, 'October'), (11, 'November'), (12, 'December')], help_text='The month that the author has died in.', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(12)], verbose_name='Month of death'),
        ),
        migrations.AlterField(
            model_name='authorpage',
            name='date_of_death_year',
            field=models.PositiveSmallIntegerField(blank=True, help_text='The year that the author has died in.', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(9999)], verbose_name='Year of death'),
        ),
        migrations.AlterField(
            model_name='authorpage',
            name='title_image',
            field=models.ForeignKey(blank=True, help_text='A meaningful image that will be used to present the author to the user.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='cms.ImageMedia', verbose_name='Title image'),
        ),
        migrations.AlterField(
            model_name='authorpagename',
            name='birth_name',
            field=models.CharField(blank=True, help_text='Birth name of the author if different from last name.', max_length=255, verbose_name='Birth name'),
        ),
        migrations.AlterField(
            model_name='authorpagename',
            name='birth_name_cs',
            field=models.CharField(blank=True, help_text='Birth name of the author if different from international spelling.', max_length=255, verbose_name='Birth name'),
        ),
        migrations.AlterField(
            model_name='authorpagename',
            name='birth_name_de',
            field=models.CharField(blank=True, help_text='Birth name of the author if different from international spelling.', max_length=255, verbose_name='Birth name'),
        ),
        migrations.AlterField(
            model_name='authorpagename',
            name='first_name_cs',
            field=models.CharField(blank=True, help_text='The first name in czech language if different from international spelling.', max_length=255, verbose_name='First name'),
        ),
        migrations.AlterField(
            model_name='authorpagename',
            name='first_name_de',
            field=models.CharField(blank=True, help_text='The first name in german language if different from international spelling.', max_length=255, verbose_name='First name'),
        ),
        migrations.AlterField(
            model_name='authorpagename',
            name='last_name_cs',
            field=models.CharField(blank=True, help_text='The first name in czech language if different from international spelling.', max_length=255, verbose_name='Last name'),
        ),
        migrations.AlterField(
            model_name='authorpagename',
            name='last_name_de',
            field=models.CharField(blank=True, help_text='The last name in german language if different from international spelling.', max_length=255, verbose_name='Last name'),
        ),
        migrations.AlterField(
            model_name='authorpagename',
            name='title',
            field=models.CharField(blank=True, help_text='The academic title of the author if any.', max_length=255, verbose_name='Title'),
        ),
        migrations.AlterField(
            model_name='authorpagename',
            name='title_cs',
            field=models.CharField(blank=True, help_text='The academic title of the author in czech language.', max_length=255, verbose_name='Title'),
        ),
        migrations.AlterField(
            model_name='authorpagename',
            name='title_de',
            field=models.CharField(blank=True, help_text='The academic title of the author in german language.', max_length=255, verbose_name='Title'),
        ),
        migrations.AlterField(
            model_name='documentmedia',
            name='alt_title',
            field=models.CharField(blank=True, help_text='Title that will be presented in mouse over tooltips and to screen readers.', max_length=1024, null=True, verbose_name='Alternative title'),
        ),
        migrations.AlterField(
            model_name='documentmedia',
            name='alt_title_cs',
            field=models.CharField(blank=True, help_text='Alternative title in czech translations.', max_length=1024, null=True, verbose_name='Alternative title (cz)'),
        ),
        migrations.AlterField(
            model_name='documentmedia',
            name='alt_title_de',
            field=models.CharField(blank=True, help_text='Alternative title in german translations.', max_length=1024, null=True, verbose_name='Alternative title (de)'),
        ),
        migrations.AlterField(
            model_name='documentmedia',
            name='caption',
            field=models.CharField(blank=True, help_text='A caption that may be presented in the context of the media item.', max_length=1024, null=True, verbose_name='Media caption'),
        ),
        migrations.AlterField(
            model_name='documentmedia',
            name='caption_cs',
            field=models.CharField(blank=True, help_text='The media caption in czech translations.', max_length=1024, null=True, verbose_name='Media caption (cz)'),
        ),
        migrations.AlterField(
            model_name='documentmedia',
            name='caption_de',
            field=models.CharField(blank=True, help_text='The media caption in german translations.', max_length=1024, null=True, verbose_name='Media caption (de)'),
        ),
        migrations.AlterField(
            model_name='documentmedia',
            name='title_cs',
            field=models.CharField(blank=True, help_text='Title as it will be used in czech translations.', max_length=255, null=True, verbose_name='Title (cz)'),
        ),
        migrations.AlterField(
            model_name='documentmedia',
            name='title_de',
            field=models.CharField(blank=True, help_text='Title as it will be used in german translations.', max_length=255, null=True, verbose_name='Title (de)'),
        ),
        migrations.AlterField(
            model_name='i18npage',
            name='draft_title_cs',
            field=models.CharField(blank=True, editable=False, help_text='The page title as given in the latest draft.', max_length=255, verbose_name='Draft title'),
        ),
        migrations.AlterField(
            model_name='i18npage',
            name='draft_title_de',
            field=models.CharField(blank=True, editable=False, help_text='The page title as given in the latest draft.', max_length=255, verbose_name='Draft title'),
        ),
        migrations.AlterField(
            model_name='i18npage',
            name='editor',
            field=models.CharField(help_text='Name or initials of the author of this content page.', max_length=2048, verbose_name='Editor'),
        ),
        migrations.AlterField(
            model_name='i18npage',
            name='title_cs',
            field=models.CharField(blank=True, help_text="The page title as you'd like it to be seen by the public", max_length=255, verbose_name='Title'),
        ),
        migrations.AlterField(
            model_name='i18npage',
            name='title_de',
            field=models.CharField(blank=True, help_text="The page title as you'd like it to be seen by the public", max_length=255, verbose_name='Title'),
        ),
        migrations.AlterField(
            model_name='imagemedia',
            name='alt_title',
            field=models.CharField(blank=True, help_text='Title that will be presented in mouse over tooltips and to screen readers.', max_length=1024, null=True, verbose_name='Alternative title'),
        ),
        migrations.AlterField(
            model_name='imagemedia',
            name='alt_title_cs',
            field=models.CharField(blank=True, help_text='Alternative title in czech translations.', max_length=1024, null=True, verbose_name='Alternative title (cz)'),
        ),
        migrations.AlterField(
            model_name='imagemedia',
            name='alt_title_de',
            field=models.CharField(blank=True, help_text='Alternative title in german translations.', max_length=1024, null=True, verbose_name='Alternative title (de)'),
        ),
        migrations.AlterField(
            model_name='imagemedia',
            name='caption',
            field=models.CharField(blank=True, help_text='A caption that may be presented in the context of the media item.', max_length=1024, null=True, verbose_name='Media caption'),
        ),
        migrations.AlterField(
            model_name='imagemedia',
            name='caption_cs',
            field=models.CharField(blank=True, help_text='The media caption in czech translations.', max_length=1024, null=True, verbose_name='Media caption (cz)'),
        ),
        migrations.AlterField(
            model_name='imagemedia',
            name='caption_de',
            field=models.CharField(blank=True, help_text='The media caption in german translations.', max_length=1024, null=True, verbose_name='Media caption (de)'),
        ),
        migrations.AlterField(
            model_name='imagemedia',
            name='title_cs',
            field=models.CharField(blank=True, help_text='Title as it will be used in czech translations.', max_length=255, null=True, verbose_name='Title (cz)'),
        ),
        migrations.AlterField(
            model_name='imagemedia',
            name='title_de',
            field=models.CharField(blank=True, help_text='Title as it will be used in german translations.', max_length=255, null=True, verbose_name='Title (de)'),
        ),
        migrations.AlterField(
            model_name='imagemediarendition',
            name='image',
            field=models.ForeignKey(help_text='The image this rendition is based on.', on_delete=django.db.models.deletion.CASCADE, related_name='renditions', to='cms.ImageMedia', verbose_name='Image rendition'),
        ),
        migrations.AlterField(
            model_name='level1page',
            name='biography',
            field=wagtail.core.fields.StreamField((('Paragraph', wagtail.core.blocks.StructBlock((('images', wagtail.core.blocks.ListBlock(wagtail.images.blocks.ImageChooserBlock())), ('content', wagtail.core.blocks.RichTextBlock(features=['bold', 'italic', 'strikethrough', 'sup', 'ol', 'ul', 'hr', 'link', 'blockquote'], help_text='Content of the text block.', required=True)), ('footnotes', wagtail.core.blocks.ListBlock(wagtail.core.blocks.RichTextBlock(features=['bold', 'italic', 'strikethrough', 'link']), help_text="Citations and comments. The item number can be linked in the content, i.e. '[1]'.")), ('editor', wagtail.core.blocks.CharBlock(help_text='Author or translator of the content.', required=True))))),), blank=True, help_text='An introductory biography of the author aimed at casual users.', verbose_name='Biography'),
        ),
        migrations.AlterField(
            model_name='level1page',
            name='biography_cs',
            field=wagtail.core.fields.StreamField((('Paragraph', wagtail.core.blocks.StructBlock((('images', wagtail.core.blocks.ListBlock(wagtail.images.blocks.ImageChooserBlock())), ('content', wagtail.core.blocks.RichTextBlock(features=['bold', 'italic', 'strikethrough', 'sup', 'ol', 'ul', 'hr', 'link', 'blockquote'], help_text='Content of the text block.', required=True)), ('footnotes', wagtail.core.blocks.ListBlock(wagtail.core.blocks.RichTextBlock(features=['bold', 'italic', 'strikethrough', 'link']), help_text="Citations and comments. The item number can be linked in the content, i.e. '[1]'.")), ('editor', wagtail.core.blocks.CharBlock(help_text='Author or translator of the content.', required=True))))),), blank=True, help_text='An introductory biography of the author aimed at casual users.', verbose_name='Biography'),
        ),
        migrations.AlterField(
            model_name='level1page',
            name='biography_de',
            field=wagtail.core.fields.StreamField((('Paragraph', wagtail.core.blocks.StructBlock((('images', wagtail.core.blocks.ListBlock(wagtail.images.blocks.ImageChooserBlock())), ('content', wagtail.core.blocks.RichTextBlock(features=['bold', 'italic', 'strikethrough', 'sup', 'ol', 'ul', 'hr', 'link', 'blockquote'], help_text='Content of the text block.', required=True)), ('footnotes', wagtail.core.blocks.ListBlock(wagtail.core.blocks.RichTextBlock(features=['bold', 'italic', 'strikethrough', 'link']), help_text="Citations and comments. The item number can be linked in the content, i.e. '[1]'.")), ('editor', wagtail.core.blocks.CharBlock(help_text='Author or translator of the content.', required=True))))),), blank=True, help_text='An introductory biography of the author aimed at casual users.', verbose_name='Biography'),
        ),
        migrations.AlterField(
            model_name='level1page',
            name='works',
            field=wagtail.core.fields.StreamField((('Paragraph', wagtail.core.blocks.StructBlock((('images', wagtail.core.blocks.ListBlock(wagtail.images.blocks.ImageChooserBlock())), ('content', wagtail.core.blocks.RichTextBlock(features=['bold', 'italic', 'strikethrough', 'sup', 'ol', 'ul', 'hr', 'link', 'blockquote'], help_text='Content of the text block.', required=True)), ('footnotes', wagtail.core.blocks.ListBlock(wagtail.core.blocks.RichTextBlock(features=['bold', 'italic', 'strikethrough', 'link']), help_text="Citations and comments. The item number can be linked in the content, i.e. '[1]'.")), ('editor', wagtail.core.blocks.CharBlock(help_text='Author or translator of the content.', required=True))))),), blank=True, help_text='An introduction to the works of the author aimed at casual users.', verbose_name='Works'),
        ),
        migrations.AlterField(
            model_name='level1page',
            name='works_cs',
            field=wagtail.core.fields.StreamField((('Paragraph', wagtail.core.blocks.StructBlock((('images', wagtail.core.blocks.ListBlock(wagtail.images.blocks.ImageChooserBlock())), ('content', wagtail.core.blocks.RichTextBlock(features=['bold', 'italic', 'strikethrough', 'sup', 'ol', 'ul', 'hr', 'link', 'blockquote'], help_text='Content of the text block.', required=True)), ('footnotes', wagtail.core.blocks.ListBlock(wagtail.core.blocks.RichTextBlock(features=['bold', 'italic', 'strikethrough', 'link']), help_text="Citations and comments. The item number can be linked in the content, i.e. '[1]'.")), ('editor', wagtail.core.blocks.CharBlock(help_text='Author or translator of the content.', required=True))))),), blank=True, help_text='An introduction to the works of the author aimed at casual users.', verbose_name='Works'),
        ),
        migrations.AlterField(
            model_name='level1page',
            name='works_de',
            field=wagtail.core.fields.StreamField((('Paragraph', wagtail.core.blocks.StructBlock((('images', wagtail.core.blocks.ListBlock(wagtail.images.blocks.ImageChooserBlock())), ('content', wagtail.core.blocks.RichTextBlock(features=['bold', 'italic', 'strikethrough', 'sup', 'ol', 'ul', 'hr', 'link', 'blockquote'], help_text='Content of the text block.', required=True)), ('footnotes', wagtail.core.blocks.ListBlock(wagtail.core.blocks.RichTextBlock(features=['bold', 'italic', 'strikethrough', 'link']), help_text="Citations and comments. The item number can be linked in the content, i.e. '[1]'.")), ('editor', wagtail.core.blocks.CharBlock(help_text='Author or translator of the content.', required=True))))),), blank=True, help_text='An introduction to the works of the author aimed at casual users.', verbose_name='Works'),
        ),
        migrations.AlterField(
            model_name='level2page',
            name='perception',
            field=wagtail.core.fields.StreamField((('Paragraph', wagtail.core.blocks.StructBlock((('images', wagtail.core.blocks.ListBlock(wagtail.images.blocks.ImageChooserBlock())), ('content', wagtail.core.blocks.RichTextBlock(features=['bold', 'italic', 'strikethrough', 'sup', 'ol', 'ul', 'hr', 'link', 'blockquote'], help_text='Content of the text block.', required=True)), ('footnotes', wagtail.core.blocks.ListBlock(wagtail.core.blocks.RichTextBlock(features=['bold', 'italic', 'strikethrough', 'link']), help_text="Citations and comments. The item number can be linked in the content, i.e. '[1]'.")), ('editor', wagtail.core.blocks.CharBlock(help_text='Author or translator of the content.', required=True))))),), blank=True, help_text='A continuative description of the perception of the author for interested user.', verbose_name='Perception'),
        ),
        migrations.AlterField(
            model_name='level2page',
            name='perception_cs',
            field=wagtail.core.fields.StreamField((('Paragraph', wagtail.core.blocks.StructBlock((('images', wagtail.core.blocks.ListBlock(wagtail.images.blocks.ImageChooserBlock())), ('content', wagtail.core.blocks.RichTextBlock(features=['bold', 'italic', 'strikethrough', 'sup', 'ol', 'ul', 'hr', 'link', 'blockquote'], help_text='Content of the text block.', required=True)), ('footnotes', wagtail.core.blocks.ListBlock(wagtail.core.blocks.RichTextBlock(features=['bold', 'italic', 'strikethrough', 'link']), help_text="Citations and comments. The item number can be linked in the content, i.e. '[1]'.")), ('editor', wagtail.core.blocks.CharBlock(help_text='Author or translator of the content.', required=True))))),), blank=True, help_text='A continuative description of the perception of the author for interested user.', verbose_name='Perception'),
        ),
        migrations.AlterField(
            model_name='level2page',
            name='perception_de',
            field=wagtail.core.fields.StreamField((('Paragraph', wagtail.core.blocks.StructBlock((('images', wagtail.core.blocks.ListBlock(wagtail.images.blocks.ImageChooserBlock())), ('content', wagtail.core.blocks.RichTextBlock(features=['bold', 'italic', 'strikethrough', 'sup', 'ol', 'ul', 'hr', 'link', 'blockquote'], help_text='Content of the text block.', required=True)), ('footnotes', wagtail.core.blocks.ListBlock(wagtail.core.blocks.RichTextBlock(features=['bold', 'italic', 'strikethrough', 'link']), help_text="Citations and comments. The item number can be linked in the content, i.e. '[1]'.")), ('editor', wagtail.core.blocks.CharBlock(help_text='Author or translator of the content.', required=True))))),), blank=True, help_text='A continuative description of the perception of the author for interested user.', verbose_name='Perception'),
        ),
        migrations.AlterField(
            model_name='level3page',
            name='primary_literature',
            field=wagtail.core.fields.StreamField((('Paragraph', wagtail.core.blocks.StructBlock((('images', wagtail.core.blocks.ListBlock(wagtail.images.blocks.ImageChooserBlock())), ('content', wagtail.core.blocks.RichTextBlock(features=['bold', 'italic', 'strikethrough', 'sup', 'ol', 'ul', 'hr', 'link', 'blockquote'], help_text='Content of the text block.', required=True)), ('footnotes', wagtail.core.blocks.ListBlock(wagtail.core.blocks.RichTextBlock(features=['bold', 'italic', 'strikethrough', 'link']), help_text="Citations and comments. The item number can be linked in the content, i.e. '[1]'.")), ('editor', wagtail.core.blocks.CharBlock(help_text='Author or translator of the content.', required=True))))),), blank=True, help_text='Further presentation of primary literature of the author for academic user.', verbose_name='Primary literature'),
        ),
        migrations.AlterField(
            model_name='level3page',
            name='primary_literature_cs',
            field=wagtail.core.fields.StreamField((('Paragraph', wagtail.core.blocks.StructBlock((('images', wagtail.core.blocks.ListBlock(wagtail.images.blocks.ImageChooserBlock())), ('content', wagtail.core.blocks.RichTextBlock(features=['bold', 'italic', 'strikethrough', 'sup', 'ol', 'ul', 'hr', 'link', 'blockquote'], help_text='Content of the text block.', required=True)), ('footnotes', wagtail.core.blocks.ListBlock(wagtail.core.blocks.RichTextBlock(features=['bold', 'italic', 'strikethrough', 'link']), help_text="Citations and comments. The item number can be linked in the content, i.e. '[1]'.")), ('editor', wagtail.core.blocks.CharBlock(help_text='Author or translator of the content.', required=True))))),), blank=True, help_text='Further presentation of primary literature of the author for academic user.', verbose_name='Primary literature'),
        ),
        migrations.AlterField(
            model_name='level3page',
            name='primary_literature_de',
            field=wagtail.core.fields.StreamField((('Paragraph', wagtail.core.blocks.StructBlock((('images', wagtail.core.blocks.ListBlock(wagtail.images.blocks.ImageChooserBlock())), ('content', wagtail.core.blocks.RichTextBlock(features=['bold', 'italic', 'strikethrough', 'sup', 'ol', 'ul', 'hr', 'link', 'blockquote'], help_text='Content of the text block.', required=True)), ('footnotes', wagtail.core.blocks.ListBlock(wagtail.core.blocks.RichTextBlock(features=['bold', 'italic', 'strikethrough', 'link']), help_text="Citations and comments. The item number can be linked in the content, i.e. '[1]'.")), ('editor', wagtail.core.blocks.CharBlock(help_text='Author or translator of the content.', required=True))))),), blank=True, help_text='Further presentation of primary literature of the author for academic user.', verbose_name='Primary literature'),
        ),
        migrations.AlterField(
            model_name='level3page',
            name='secondary_literature',
            field=wagtail.core.fields.StreamField((('Paragraph', wagtail.core.blocks.StructBlock((('images', wagtail.core.blocks.ListBlock(wagtail.images.blocks.ImageChooserBlock())), ('content', wagtail.core.blocks.RichTextBlock(features=['bold', 'italic', 'strikethrough', 'sup', 'ol', 'ul', 'hr', 'link', 'blockquote'], help_text='Content of the text block.', required=True)), ('footnotes', wagtail.core.blocks.ListBlock(wagtail.core.blocks.RichTextBlock(features=['bold', 'italic', 'strikethrough', 'link']), help_text="Citations and comments. The item number can be linked in the content, i.e. '[1]'.")), ('editor', wagtail.core.blocks.CharBlock(help_text='Author or translator of the content.', required=True))))),), blank=True, help_text='Further secondary literature about the author and his works aimed at academic users.', verbose_name='Secondary literature'),
        ),
        migrations.AlterField(
            model_name='level3page',
            name='secondary_literature_cs',
            field=wagtail.core.fields.StreamField((('Paragraph', wagtail.core.blocks.StructBlock((('images', wagtail.core.blocks.ListBlock(wagtail.images.blocks.ImageChooserBlock())), ('content', wagtail.core.blocks.RichTextBlock(features=['bold', 'italic', 'strikethrough', 'sup', 'ol', 'ul', 'hr', 'link', 'blockquote'], help_text='Content of the text block.', required=True)), ('footnotes', wagtail.core.blocks.ListBlock(wagtail.core.blocks.RichTextBlock(features=['bold', 'italic', 'strikethrough', 'link']), help_text="Citations and comments. The item number can be linked in the content, i.e. '[1]'.")), ('editor', wagtail.core.blocks.CharBlock(help_text='Author or translator of the content.', required=True))))),), blank=True, help_text='Further secondary literature about the author and his works aimed at academic users.', verbose_name='Secondary literature'),
        ),
        migrations.AlterField(
            model_name='level3page',
            name='secondary_literature_de',
            field=wagtail.core.fields.StreamField((('Paragraph', wagtail.core.blocks.StructBlock((('images', wagtail.core.blocks.ListBlock(wagtail.images.blocks.ImageChooserBlock())), ('content', wagtail.core.blocks.RichTextBlock(features=['bold', 'italic', 'strikethrough', 'sup', 'ol', 'ul', 'hr', 'link', 'blockquote'], help_text='Content of the text block.', required=True)), ('footnotes', wagtail.core.blocks.ListBlock(wagtail.core.blocks.RichTextBlock(features=['bold', 'italic', 'strikethrough', 'link']), help_text="Citations and comments. The item number can be linked in the content, i.e. '[1]'.")), ('editor', wagtail.core.blocks.CharBlock(help_text='Author or translator of the content.', required=True))))),), blank=True, help_text='Further secondary literature about the author and his works aimed at academic users.', verbose_name='Secondary literature'),
        ),
        migrations.AlterField(
            model_name='level3page',
            name='testimony',
            field=wagtail.core.fields.StreamField((('Paragraph', wagtail.core.blocks.StructBlock((('images', wagtail.core.blocks.ListBlock(wagtail.images.blocks.ImageChooserBlock())), ('content', wagtail.core.blocks.RichTextBlock(features=['bold', 'italic', 'strikethrough', 'sup', 'ol', 'ul', 'hr', 'link', 'blockquote'], help_text='Content of the text block.', required=True)), ('footnotes', wagtail.core.blocks.ListBlock(wagtail.core.blocks.RichTextBlock(features=['bold', 'italic', 'strikethrough', 'link']), help_text="Citations and comments. The item number can be linked in the content, i.e. '[1]'.")), ('editor', wagtail.core.blocks.CharBlock(help_text='Author or translator of the content.', required=True))))),), blank=True, help_text='TODO', verbose_name='Testimony'),
        ),
        migrations.AlterField(
            model_name='level3page',
            name='testimony_cs',
            field=wagtail.core.fields.StreamField((('Paragraph', wagtail.core.blocks.StructBlock((('images', wagtail.core.blocks.ListBlock(wagtail.images.blocks.ImageChooserBlock())), ('content', wagtail.core.blocks.RichTextBlock(features=['bold', 'italic', 'strikethrough', 'sup', 'ol', 'ul', 'hr', 'link', 'blockquote'], help_text='Content of the text block.', required=True)), ('footnotes', wagtail.core.blocks.ListBlock(wagtail.core.blocks.RichTextBlock(features=['bold', 'italic', 'strikethrough', 'link']), help_text="Citations and comments. The item number can be linked in the content, i.e. '[1]'.")), ('editor', wagtail.core.blocks.CharBlock(help_text='Author or translator of the content.', required=True))))),), blank=True, help_text='TODO', verbose_name='Testimony'),
        ),
        migrations.AlterField(
            model_name='level3page',
            name='testimony_de',
            field=wagtail.core.fields.StreamField((('Paragraph', wagtail.core.blocks.StructBlock((('images', wagtail.core.blocks.ListBlock(wagtail.images.blocks.ImageChooserBlock())), ('content', wagtail.core.blocks.RichTextBlock(features=['bold', 'italic', 'strikethrough', 'sup', 'ol', 'ul', 'hr', 'link', 'blockquote'], help_text='Content of the text block.', required=True)), ('footnotes', wagtail.core.blocks.ListBlock(wagtail.core.blocks.RichTextBlock(features=['bold', 'italic', 'strikethrough', 'link']), help_text="Citations and comments. The item number can be linked in the content, i.e. '[1]'.")), ('editor', wagtail.core.blocks.CharBlock(help_text='Author or translator of the content.', required=True))))),), blank=True, help_text='TODO', verbose_name='Testimony'),
        ),
        migrations.AlterField(
            model_name='literaryperiodpage',
            name='description',
            field=models.TextField(blank=True, help_text='A general description of the literary period and its significants.', verbose_name='Description'),
        ),
        migrations.AlterField(
            model_name='literaryperiodpage',
            name='description_cs',
            field=models.TextField(blank=True, help_text='A general description of the literary period and its significants.', verbose_name='Description'),
        ),
        migrations.AlterField(
            model_name='literaryperiodpage',
            name='description_de',
            field=models.TextField(blank=True, help_text='A general description of the literary period and its significants.', verbose_name='Description'),
        ),
        migrations.AlterField(
            model_name='locationpage',
            name='address',
            field=models.TextField(blank=True, help_text='The postal address of the location if any.', verbose_name='Address'),
        ),
        migrations.AlterField(
            model_name='locationpage',
            name='address_cs',
            field=models.TextField(blank=True, help_text='The postal address of the location if any.', verbose_name='Address'),
        ),
        migrations.AlterField(
            model_name='locationpage',
            name='address_de',
            field=models.TextField(blank=True, help_text='The postal address of the location if any.', verbose_name='Address'),
        ),
        migrations.AlterField(
            model_name='locationpage',
            name='coordinates',
            field=django.contrib.gis.db.models.fields.PointField(help_text='The actual geographic location.', srid=4326, verbose_name='Coordinates'),
        ),
        migrations.AlterField(
            model_name='locationpage',
            name='description',
            field=models.TextField(blank=True, help_text='A short general description of the location without any relation to specific authors.', verbose_name='Description'),
        ),
        migrations.AlterField(
            model_name='locationpage',
            name='description_cs',
            field=models.TextField(blank=True, help_text='A short general description of the location without any relation to specific authors.', verbose_name='Description'),
        ),
        migrations.AlterField(
            model_name='locationpage',
            name='description_de',
            field=models.TextField(blank=True, help_text='A short general description of the location without any relation to specific authors.', verbose_name='Description'),
        ),
        migrations.AlterField(
            model_name='locationpage',
            name='directions',
            field=models.TextField(blank=True, help_text='A short informative description of directions to find the location.', verbose_name='Direction'),
        ),
        migrations.AlterField(
            model_name='locationpage',
            name='directions_cs',
            field=models.TextField(blank=True, help_text='A short informative description of directions to find the location.', verbose_name='Direction'),
        ),
        migrations.AlterField(
            model_name='locationpage',
            name='directions_de',
            field=models.TextField(blank=True, help_text='A short informative description of directions to find the location.', verbose_name='Direction'),
        ),
        migrations.AlterField(
            model_name='locationpage',
            name='location_type',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='locations', to='cms.LocationTypePage', verbose_name='Location type)'),
        ),
        migrations.AlterField(
            model_name='locationpage',
            name='title_image',
            field=models.ForeignKey(blank=True, help_text='A meaningful image that will be used to present the location to the user.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='cms.ImageMedia', verbose_name='Title image'),
        ),
        migrations.AlterField(
            model_name='memorialsiteauthor',
            name='author',
            field=models.ForeignKey(help_text='The author that is remebered by this memorial site.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='memorial_sites', to='cms.AuthorPage', verbose_name='Author'),
        ),
        migrations.AlterField(
            model_name='memorialsiteauthor',
            name='memorial_site',
            field=modelcluster.fields.ParentalKey(help_text='The memorial site this mapping references to.', on_delete=django.db.models.deletion.CASCADE, related_name='authors', to='cms.MemorialSitePage', verbose_name='Memorial site'),
        ),
        migrations.AlterField(
            model_name='memorialsitepage',
            name='description',
            field=wagtail.core.fields.RichTextField(blank=True, help_text='A description of the memorial site and its significants to the referenced authors.', verbose_name='Description'),
        ),
        migrations.AlterField(
            model_name='memorialsitepage',
            name='description_cs',
            field=wagtail.core.fields.RichTextField(blank=True, help_text='A description of the memorial site and its significants to the referenced authors.', verbose_name='Description'),
        ),
        migrations.AlterField(
            model_name='memorialsitepage',
            name='description_de',
            field=wagtail.core.fields.RichTextField(blank=True, help_text='A description of the memorial site and its significants to the referenced authors.', verbose_name='Description'),
        ),
        migrations.AlterField(
            model_name='memorialsitepage',
            name='title_image',
            field=models.ForeignKey(blank=True, help_text='A meaningful image that will be used to present the memorial site to the user.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='cms.ImageMedia', verbose_name='Title image'),
        ),
        migrations.AlterModelTable(
            name='memorialsitepage',
            table='memorial_site',
        ),
    ]
