# Generated by Django 2.0.2 on 2018-07-03 09:12

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import modelcluster.fields
import wagtail.core.blocks
import wagtail.core.fields
import wagtail.images.blocks


class Migration(migrations.Migration):

    dependencies = [
        ('cms', '0012_auto_20180621_0914'),
    ]

    operations = [
        migrations.CreateModel(
            name='Genre',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='The title of this tag as shown to the user.', max_length=1000, verbose_name='Title')),
                ('title_de', models.CharField(blank=True, help_text='The german title of the tag as shown to the user.', max_length=1000, verbose_name='German title')),
                ('title_cs', models.CharField(blank=True, help_text='The czech title of the tag as show to the user.', max_length=1000, verbose_name='Czech title')),
            ],
            options={
                'verbose_name': 'Genre',
                'verbose_name_plural': 'Genres',
                'db_table': 'cms_tag_genre',
            },
        ),
        migrations.CreateModel(
            name='Language',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='The title of this tag as shown to the user.', max_length=1000, verbose_name='Title')),
                ('title_de', models.CharField(blank=True, help_text='The german title of the tag as shown to the user.', max_length=1000, verbose_name='German title')),
                ('title_cs', models.CharField(blank=True, help_text='The czech title of the tag as show to the user.', max_length=1000, verbose_name='Czech title')),
            ],
            options={
                'verbose_name': 'Language',
                'verbose_name_plural': 'Languages',
                'db_table': 'cms_tag_language',
            },
        ),
        migrations.AlterModelOptions(
            name='authorlanguage',
            options={'verbose_name': 'Language of the author', 'verbose_name_plural': 'Languages of the auhtor'},
        ),
        migrations.AlterModelOptions(
            name='authorliterarycategory',
            options={'verbose_name': 'Genre of the author', 'verbose_name_plural': 'Genres of the author'},
        ),
        migrations.AlterModelOptions(
            name='authorliteraryperiod',
            options={'verbose_name': 'Literary period of the author', 'verbose_name_plural': 'Literary periods of the author'},
        ),
        migrations.AlterModelOptions(
            name='contacttypepage',
            options={'verbose_name': 'Contact type', 'verbose_name_plural': 'Contact types'},
        ),
        migrations.AlterModelOptions(
            name='contacttypespage',
            options={'verbose_name': 'Contact types'},
        ),
        migrations.AlterModelOptions(
            name='homepage',
            options={'verbose_name': 'Homepage', 'verbose_name_plural': 'Homepages'},
        ),
        migrations.AlterModelOptions(
            name='level3page',
            options={'verbose_name': 'III. Material'},
        ),
        migrations.AlterModelOptions(
            name='literarycategoriespage',
            options={'verbose_name': 'Genres'},
        ),
        migrations.AlterModelOptions(
            name='literarycategorypage',
            options={'verbose_name': 'Genre', 'verbose_name_plural': 'Genres'},
        ),
        migrations.AlterModelOptions(
            name='literaryperiodpage',
            options={'verbose_name': 'Literary period'},
        ),
        migrations.AlterModelOptions(
            name='locationpagecontact',
            options={'verbose_name': 'Contact of the location', 'verbose_name_plural': 'Contacts of the location'},
        ),
        migrations.AlterModelOptions(
            name='memorialsiteauthor',
            options={'verbose_name': 'Dedicated site', 'verbose_name_plural': 'Dedicated sites'},
        ),
        migrations.AlterField(
            model_name='authorlanguage',
            name='author',
            field=modelcluster.fields.ParentalKey(help_text='Author that this mapping is referencing.', on_delete=django.db.models.deletion.CASCADE, related_name='languages', to='cms.AuthorPage', verbose_name='Author'),
        ),
        migrations.AlterField(
            model_name='authorliterarycategory',
            name='author',
            field=modelcluster.fields.ParentalKey(help_text='Author that this mapping is referencing.', on_delete=django.db.models.deletion.CASCADE, related_name='literary_categories', to='cms.AuthorPage', verbose_name='Author'),
        ),
        migrations.AlterField(
            model_name='authorpage',
            name='date_of_death_day',
            field=models.PositiveSmallIntegerField(blank=True, help_text='The day that the author is born on.', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(31)], verbose_name='Day of death'),
        ),
        migrations.AlterField(
            model_name='authorpage',
            name='date_of_death_month',
            field=models.PositiveSmallIntegerField(blank=True, choices=[(1, 'January'), (2, 'February'), (3, 'March'), (4, 'April'), (5, 'May'), (6, 'June'), (7, 'July'), (8, 'August'), (9, 'September'), (10, 'October'), (11, 'November'), (12, 'December')], help_text='The month that the author is born in.', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(12)], verbose_name='Month of death'),
        ),
        migrations.AlterField(
            model_name='authorpage',
            name='date_of_death_year',
            field=models.PositiveSmallIntegerField(blank=True, help_text='The year that the author is born in.', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(9999)], verbose_name='Year of death'),
        ),
        migrations.AlterField(
            model_name='authorpage',
            name='sex',
            field=models.CharField(choices=[('U', 'unknown'), ('M', 'male'), ('F', 'female')], default='U', max_length=1, verbose_name='Gender'),
        ),
        migrations.AlterField(
            model_name='authorpagename',
            name='title_cs',
            field=models.CharField(blank=True, help_text='Academic title of the author in Czech if different from international spelling.', max_length=255, verbose_name='Title'),
        ),
        migrations.AlterField(
            model_name='authorpagename',
            name='title_de',
            field=models.CharField(blank=True, help_text='Academic title of the author in German if different from international spelling.', max_length=255, verbose_name='Title'),
        ),
        migrations.AlterField(
            model_name='i18npage',
            name='draft_title_cs',
            field=models.CharField(blank=True, editable=False, help_text='Czech title of the page as given of the latest draft.', max_length=255, verbose_name='Czech draft title'),
        ),
        migrations.AlterField(
            model_name='i18npage',
            name='draft_title_de',
            field=models.CharField(blank=True, editable=False, help_text='German title of the page as given of the latest draft.', max_length=255, verbose_name='German draft title'),
        ),
        migrations.AlterField(
            model_name='level2page',
            name='full_texts',
            field=wagtail.core.fields.StreamField([('paragraph', wagtail.core.blocks.StructBlock([('heading', wagtail.core.blocks.CharBlock(help_text='An optional heading to structure comprehensive text content.', label='Optional heading', required=False)), ('images', wagtail.core.blocks.ListBlock(wagtail.images.blocks.ImageChooserBlock(), default=[], help_text='Images that will be displayed alongside the text content of the paragraph.', label='Images')), ('content', wagtail.core.blocks.RichTextBlock(features=['bold', 'italic', 'strikethrough', 'footnote', 'ol', 'ul', 'hr', 'link', 'blockquote'], help_text='The actual text content of this paragraph.', label='Content', required=True)), ('footnotes', wagtail.core.blocks.ListBlock(wagtail.core.blocks.StructBlock([('tag', wagtail.core.blocks.CharBlock(help_text="A tag that allows to link the footnote with the paragraphs text content in the form '[tag]'.", label='Linkable tag', required=False)), ('footnote', wagtail.core.blocks.RichTextBlock(features=['bold', 'italic', 'strikethrough', 'link'], help_text='Citations, comments and references.', label='Footnote'))]), default=[], help_text='Optional footnotes to the text content.', label='Footnotes')), ('editor', wagtail.core.blocks.CharBlock(help_text='Author or translator of the content.', label='Editor', required=True))]))], blank=True, help_text='Short full texts (i.e. poems, short stories) by the author that have been mentioned or are partially quoted in the text about the author.', verbose_name='Full texts'),
        ),
        migrations.AlterField(
            model_name='level2page',
            name='full_texts_cs',
            field=wagtail.core.fields.StreamField([('paragraph', wagtail.core.blocks.StructBlock([('heading', wagtail.core.blocks.CharBlock(help_text='An optional heading to structure comprehensive text content.', label='Optional heading', required=False)), ('images', wagtail.core.blocks.ListBlock(wagtail.images.blocks.ImageChooserBlock(), default=[], help_text='Images that will be displayed alongside the text content of the paragraph.', label='Images')), ('content', wagtail.core.blocks.RichTextBlock(features=['bold', 'italic', 'strikethrough', 'footnote', 'ol', 'ul', 'hr', 'link', 'blockquote'], help_text='The actual text content of this paragraph.', label='Content', required=True)), ('footnotes', wagtail.core.blocks.ListBlock(wagtail.core.blocks.StructBlock([('tag', wagtail.core.blocks.CharBlock(help_text="A tag that allows to link the footnote with the paragraphs text content in the form '[tag]'.", label='Linkable tag', required=False)), ('footnote', wagtail.core.blocks.RichTextBlock(features=['bold', 'italic', 'strikethrough', 'link'], help_text='Citations, comments and references.', label='Footnote'))]), default=[], help_text='Optional footnotes to the text content.', label='Footnotes')), ('editor', wagtail.core.blocks.CharBlock(help_text='Author or translator of the content.', label='Editor', required=True))]))], blank=True, help_text='Short full texts (i.e. poems, short stories) by the author that have been mentioned or are partially quoted in the text about the author.', verbose_name='Full texts'),
        ),
        migrations.AlterField(
            model_name='level2page',
            name='full_texts_de',
            field=wagtail.core.fields.StreamField([('paragraph', wagtail.core.blocks.StructBlock([('heading', wagtail.core.blocks.CharBlock(help_text='An optional heading to structure comprehensive text content.', label='Optional heading', required=False)), ('images', wagtail.core.blocks.ListBlock(wagtail.images.blocks.ImageChooserBlock(), default=[], help_text='Images that will be displayed alongside the text content of the paragraph.', label='Images')), ('content', wagtail.core.blocks.RichTextBlock(features=['bold', 'italic', 'strikethrough', 'footnote', 'ol', 'ul', 'hr', 'link', 'blockquote'], help_text='The actual text content of this paragraph.', label='Content', required=True)), ('footnotes', wagtail.core.blocks.ListBlock(wagtail.core.blocks.StructBlock([('tag', wagtail.core.blocks.CharBlock(help_text="A tag that allows to link the footnote with the paragraphs text content in the form '[tag]'.", label='Linkable tag', required=False)), ('footnote', wagtail.core.blocks.RichTextBlock(features=['bold', 'italic', 'strikethrough', 'link'], help_text='Citations, comments and references.', label='Footnote'))]), default=[], help_text='Optional footnotes to the text content.', label='Footnotes')), ('editor', wagtail.core.blocks.CharBlock(help_text='Author or translator of the content.', label='Editor', required=True))]))], blank=True, help_text='Short full texts (i.e. poems, short stories) by the author that have been mentioned or are partially quoted in the text about the author.', verbose_name='Full texts'),
        ),
    ]
